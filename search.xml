<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码随想录算法训练营Day1|数组、二分、移除</title>
    <url>/2023/03/15/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E7%AE%97%E6%B3%95day1%E6%95%B0%E7%BB%84%E4%BA%8C%E5%88%86%E7%A7%BB%E9%99%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="代码随想录算法训练营Day1-数组、二分、移除"><a href="#代码随想录算法训练营Day1-数组、二分、移除" class="headerlink" title="代码随想录算法训练营Day1|数组、二分、移除"></a>代码随想录算法训练营Day1|数组、二分、移除</h1><h2 id="数组理论（非常基础的数据结构）"><a href="#数组理论（非常基础的数据结构）" class="headerlink" title="数组理论（非常基础的数据结构）"></a>数组理论（非常基础的数据结构）</h2><p>当初学408的时候，甚至追到大一的c语言课程，数组都是非常重要的知识点，理解起来并没有那么困难，不过直到如今指针依然是让我脑壳疼的存在，也不是地址的连续性与计算。非要描述的话，就是定义、描述？</p>
<p>数组就像是队伍的行列，也可以打个比方为生物课本里一排排的植物细胞显微镜下的状态……一个细胞占一小段连续的内存。只要知道基准点和下标，地址非常好求，按图索骥。</p>
<p>对，二维数组指针让人头疼，每行的首指针貌似（记忆过于久远了），不过这针对的是c语言，个人目前打算研究Java。而Java没有指针真是个好消息。而Java的二维数组嘛，就像是不同的书的名字，每个名字后面跟着目录，从一开始就互不关联。</p>
<p>说回数组本身，408简直不能忽视。数据结构就不用多说了，与其相似的还有栈、链表，数组可以用链表表示，不过过于麻烦。图，广度搜索、深度搜索等等都是以数组为基础（今年代码题竟然不考算法，考图，我……）。排序、搜索不用多说。计网pass，计网都是各种协议。操作系统的文件系统与数组的内存可以说是差不离，都是以起始点，每个文件的大小来进行计算，不同的大概只有文件系统需要考虑的位数指代多少内存。计组，与操作系统同理，深化到了程序指令的内存地址。荣耀归于计算机组成原理——  只要会计组，操作系统简直不在话下（问题是我寄了啊啊啊……）  如果数组不熟练，我会翻出王道书和C primer plus再看一遍，真的，关于数组过长时间没看过了。</p>
<h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/binary-search/">力扣</a></p>
<p>408数据结构接触过（但是你没实操啊没实操），变形我记得可以用双指针法，历年真题里面不少双指针，王道甚至某一年的真题给的三指针震撼我一整年。虽然，咳，这题暂时还没那么高大上……</p>
<p>简而言之就是明确界限，左边界限、右边界限、由此确定的中间的比较值。根据比较值与目标值的比较大小关系再把中间值定为新的左or右界限，取新中间值，如此往复直到找到。</p>
<p>虽然思路很明确，但是对我来说最大的问题是——不知道如何下手。</p>
<p>定义谁？for循环肯定是双层，判断条件怎么写，就是一头雾水。</p>
<p>所以说啊（痛心疾首），实践出真知，你纸上谈兵不还是什么都没干吗？这是我用一年得出的惨痛教训T_T</p>
<p>先定义左右，然后是middle，不过首先是while循环这个我倒是没想到的，比较之后如何确定新边界是个关键点。由此引申出区间的定义，要不要最右边的那个数。两种定义，写法会有微妙的不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">         int left = 0;</span><br><span class="line">         int right = nums.length-1;</span><br><span class="line">         while(left &lt;= right)&#123;</span><br><span class="line">             int middle = left +((right - left)/2);// &gt;&gt;1 位运算呐</span><br><span class="line">             if(nums[middle] &gt; target)&#123;</span><br><span class="line">                 right = middle - 1;</span><br><span class="line">             &#125;else if (nums[middle] &lt; target)&#123;</span><br><span class="line">                 left = middle + 1;</span><br><span class="line">             &#125;else &#123;</span><br><span class="line">                 return middle;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（全比较版本）</p>
<p>抛去右边的话（因为递增顺序，右边一般来说不用），while循环直接&lt;,length不减，左区间重定位middle，右区间保持middle+1。</p>
<p>size（）函数不能用，面对编译一脸懵逼，上次编译失败是‘ ‘这对符号错误，而且又和指针有关，最后也没解决…… Java，果然还是用length</p>
<h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/remove-element/">力扣</a></p>
<p>简单地删除元素就没什么好说的，直接遍历for走起，问题是，这是数组，只能覆盖，突然就觉得链表不那么面目可憎了（</p>
<p>双指针真是太好用了，暴力解速度没问题但是内存稍微高一点。每日一轮自己的实操。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">         int num=nums.length;</span><br><span class="line">         for(int i=0;i&lt;num;i++)&#123;</span><br><span class="line">              if(nums[i]==val)&#123;</span><br><span class="line">                for(int j=i+1;j&lt;num;j++)&#123;</span><br><span class="line">                    nums[j-1]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            i--;</span><br><span class="line">            num--;</span><br><span class="line">         &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      return num;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是快慢指针，简而言之就是把快指针遍历过的元素用慢指针在原数组上原地誊写。遇到要删除的元素，快指针跳过，慢指针无情把这格覆盖掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">         int slowIndex = 0;</span><br><span class="line">        for (int fastIndex = 0; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            if (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return slowIndex;</span><br><span class="line">    &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此处用的是代码随想录上的示例代码。</p>
<h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><p>二分查找除了704，还有35 34两题，有空要看看。</p>
<p>marktext真好用啊，typora付费有点不舍，可惜如果我要买点什么我会先打算买marginnote 3</p>
<p>痛苦做毕设，等毕设做完就能愉快搞代码了</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/13/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
