<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码随想录算法训练营Day7|哈希表 454、383、15、18</title>
    <url>/2023/03/20/Day7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="454-四数相加"><a href="#454-四数相加" class="headerlink" title="454 四数相加"></a>454 四数相加</h2><p><a href="https://leetcode.cn/problems/4sum-ii/">力扣题目链接</a></p>
<p>四个数组，每个取一个，相加为0。的确没想到这个思路，好好学习。</p>
<p>和之前的哈希表题目密切相关，算是进阶题。四组，两组两组合并，A、B组的和，查找C、D组的相应和，就是这样。</p>
<p>unordered_map 类型  key为和  value为次数</p>
<p>剩下的就交给昨天的步骤了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();   //定义先</span><br><span class="line">        int temp;</span><br><span class="line">        int res = 0;         // 计时</span><br><span class="line">        for(int i : nums1)&#123;</span><br><span class="line">            for(int j : nums2)&#123;</span><br><span class="line">                temp = i +j;</span><br><span class="line">                if(map.containsKey(temp))&#123;</span><br><span class="line">                    map.put(temp,map.get(temp)+1);      //给和</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    map.put(temp,1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i : nums3)&#123;</span><br><span class="line">            for(int j : nums4)&#123;</span><br><span class="line">                temp= i+j;</span><br><span class="line">                if(map.containsKey(0-temp))&#123;          //去和</span><br><span class="line">                    res+=map.get(0-temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383 赎金信"></a>383 赎金信</h2><p><a href="https://leetcode.cn/problems/ransom-note/">力扣题目链接</a></p>
<p>暴力解就是杂志和信两层for循环，还算好，不过要求不能重复使用字母，还要删除使用过的字母，嗯……数组的删除我会吗，我不会</p>
<p>哈希就简单多了，毕竟只有26个选项 26个坑</p>
<p>map 比数组消耗大，“  map要维护红黑树或者哈希表，而且还要做哈希函数，是费时的！数据量大的话就能体现出来差别了。 所以数组更加简单直接有效 ”   我还是要想想，自己的惯有思维一般得出的结论会是map比数组好，，，针对性</p>
<p>for(int i = ???) 表示没见过，不过知道大致意思了</p>
<p>toCharArray( )也没见过，字符串操作应该？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canConstruct(String ransomNote, String magazine) &#123;</span><br><span class="line">               int[] hash = new int[26];</span><br><span class="line">               for(char c :magazine.toCharArray())&#123;</span><br><span class="line">                   hash[c - &#x27;a&#x27;] += 1;</span><br><span class="line">               &#125;</span><br><span class="line">               for(char c : ransomNote.toCharArray())&#123;</span><br><span class="line">                   hash[c - &#x27;a&#x27;] -=1;</span><br><span class="line">               &#125;</span><br><span class="line">               for(int i : hash)&#123;</span><br><span class="line">                   if(i&lt;0)&#123;</span><br><span class="line">                       return false;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15 三数之和"></a>15 三数之和</h2><p><a href="https://leetcode.cn/problems/3sum/">力扣题目链接</a></p>
<p>啊，我一开始就在想三指针，不过三指针的逻辑不知道怎么理顺，约等于两层for循环？还是折半查找类型，快排？哈希表，用四数相加思路？但是题目不允许包含重复三元组，可以吗？well，忘了，只给了一个数组。那还是用三指针吧。</p>
<p>代码随想录是双指针，a、b、c的去重很关键，学习了，代码执行数组的顺序也很重要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) &#123;</span><br><span class="line">          List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">          Arrays.sort(nums);  </span><br><span class="line">          for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">	        if (nums[i] &gt; 0) &#123; </span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) &#123;  // 去重a   i    i-1</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int left = i + 1;</span><br><span class="line">            int right = nums.length - 1;</span><br><span class="line">            while (right &gt; left) &#123;</span><br><span class="line">                int sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                if (sum &gt; 0) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; else if (sum &lt; 0) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));     // 找到一个三元组之后再去重</span><br><span class="line">                    while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;        //while if</span><br><span class="line">                    while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span><br><span class="line">                    </span><br><span class="line">                    right--; </span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18 四数之和"></a>18 四数之和</h2><p><a href="https://leetcode.cn/problems/4sum/">力扣题目链接</a></p>
<p>四数之和，总不能三指针吧，或许可以一半指针一半哈希？还是直接全部哈希？for循环用得上吗？不行，指针与哈希的衔接会很复杂吧。而且目标值可以是任意值了。4数的去重？……</p>
<p>在三数之和的基础上加for循环吗，是比for加哈希好一点，去重更加复杂了</p>
<p>示例代码，主要是最近在搞毕设，明天要开会，最近几天质量差一些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">       </span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">		</span><br><span class="line">            if (nums[i] &gt; 0 &amp;&amp; nums[i] &gt; target) &#123;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">		</span><br><span class="line">            if (i &gt; 0 &amp;&amp; nums[i - 1] == nums[i]) &#123;    // i去重</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            for (int j = i + 1; j &lt; nums.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">                if (j &gt; i + 1 &amp;&amp; nums[j - 1] == nums[j]) &#123;  // j去重</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                int left = j + 1;</span><br><span class="line">                int right = nums.length - 1;</span><br><span class="line">                while (right &gt; left) &#123;//long</span><br><span class="line">                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    if (sum &gt; target) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125; else if (sum &lt; target) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));</span><br><span class="line">                        // left、right去重</span><br><span class="line">                        while (right &gt; left &amp;&amp; nums[right] == nums[right - 1]) right--;</span><br><span class="line">                        while (right &gt; left &amp;&amp; nums[left] == nums[left + 1]) left++;</span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很多基础操作代码都不会，哈希表使人快乐（</p>
<p>任重道远，等我搞完毕设————</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day2|数组977、209、59</title>
    <url>/2023/03/16/d2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977 有序数组的平方"></a>977 有序数组的平方</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">力扣</a></p>
<p>没有看见题目建议是双指针，也没看见进阶要求时间复杂度为O（n），是我的错，当即写了暴力解，然后时间超时（望天）明明我昨天才感慨完双指针……</p>
<p>垃圾暴力解（继续望天）因为直接超时所以我连自己的代码质量都不知道（继续继续望天</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] sortedSquares(int[] nums) &#123;</span><br><span class="line">            int s=nums.length;</span><br><span class="line">            int[] sq = new int[nums.length];</span><br><span class="line">            for(int i=0;i&lt;=s-1;i++)&#123;</span><br><span class="line">                sq[i]=nums[i]*nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            for(int j=1;j&lt;=s-1;j++)&#123;</span><br><span class="line">                for(int k=1;k&lt;=s;s++)&#123;</span><br><span class="line">                    if(sq[k]&lt;sq[k-1])&#123;</span><br><span class="line">                        int temp=sq[k];</span><br><span class="line">                        sq[k]=sq[k-1];</span><br><span class="line">                        sq[k-1]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return sq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码随想录的暴力解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; A) &#123;</span><br><span class="line">        for (int i = 0; i &lt; A.size(); i++) &#123;</span><br><span class="line">            A[i] *= A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(A.begin(), A.end()); // 快速排序</span><br><span class="line">        return A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>核心代码模式可以直接快排吗？？？</p>
<p>自己写的暴力解显现出了另一个问题：数组的溢出，鉴于自己真的太久没看基础了，这种错误当然是会犯的啊哈哈哈，不行，我真的得要重新过一遍了。</p>
<p><u>java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5</u></p>
<p>java的数组报错，下标越界，length、int[0]直接套就会出现这种事，混乱</p>
<p>双指针思路看懂了，毕竟是有负数的数组，平方后绝对值说不定是最大的，那么就从排序的最大值开始排好了，最大值只会从两边出现，所以就用双指针一个头一个尾开始比较。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] sortedSquares(int[] nums) &#123;</span><br><span class="line">         int last =nums.length-1;</span><br><span class="line">         int first = 0;</span><br><span class="line">         int[] sq = new int[nums.length];</span><br><span class="line">         int index = sq.length-1;</span><br><span class="line">         while(first&lt;=last)&#123;</span><br><span class="line">             if(nums[first]*nums[first]&gt;nums[last]*nums[last])&#123;</span><br><span class="line">                 sq[index--]=nums[first]*nums[first];</span><br><span class="line">                 first++;</span><br><span class="line">             &#125;else&#123;</span><br><span class="line">                 sq[index--]=nums[last]*nums[last];</span><br><span class="line">                 last--;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         return sq;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(思路不是问题，问题是我不会写代码，啊)</p>
<h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209 长度最小的子数组"></a>209 长度最小的子数组</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">力扣</a></p>
<p>初始反而没想出来暴力解，反而在想边框，先长度为2，再长度为3滑动，不过这也是两层for循环，而且理解起来也麻烦，不提不提，比暴力解还要麻烦。还是双指针，两个指针框起来的就是数组。实操，思路还是要实操，所以怎么写</p>
<p>A先不动，滑B，大于数值，滑A，一直到相等，时间复杂度O（n）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minSubArrayLen(int target, int[] nums) &#123;</span><br><span class="line">       int A = 0;</span><br><span class="line">       int sum = 0;</span><br><span class="line">       int correct = Integer.MAX_VALUE;</span><br><span class="line">       for(int B = 0;B&lt;nums.length;B++)&#123;</span><br><span class="line">           sum+=nums[B];</span><br><span class="line">           while(sum&gt;=target)&#123;  //本来觉得if可以，然后示例挂了。后来想了一下发现，减一次也不一定就能重回目标值，毕竟数字又不是均等的</span><br><span class="line">               correct = Math.min(correct,B-A+1);</span><br><span class="line">               sum-=nums[A];</span><br><span class="line">               A++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return correct ==Integer.MAX_VALUE ? 0 : correct;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59 螺旋矩阵II"></a>59 螺旋矩阵II</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣</a></p>
<p>乍一看没什么，但是再一想就感觉麻烦度蹭蹭的上涨，这可不是具体给个数，而是固定化的步骤，用数组表示，划分区间，但是我对数组的掌控度很不够。从行、从列调控二维数组，内圈的尺寸也需要代码规定，让我想起了解函数设一堆x的代数式，不过还是简洁不起来。</p>
<p>比之前的难，去视频看了一眼最后几行是什么意思，是最后一圈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[][] generateMatrix(int n) &#123;</span><br><span class="line">       int loop = 0;</span><br><span class="line">       int [][] res = new int[n][n];</span><br><span class="line">       int start = 0;</span><br><span class="line">       int min = 1;</span><br><span class="line">       int i,j;</span><br><span class="line"></span><br><span class="line">       while(loop++ &lt; n/2)&#123;     //上</span><br><span class="line">           for(j=start;j&lt;n-loop;j++)&#123;</span><br><span class="line">               res[start][j]=min++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           for(i=start;i&lt;n-loop;i++)&#123;    //右</span><br><span class="line">               res[i][j]=min++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           for(;j&gt;=loop;j--)&#123;    //下</span><br><span class="line">               res[i][j]=min++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           for(;i&gt;=loop;i--)&#123;      //左</span><br><span class="line">               res[i][j]=min++;</span><br><span class="line"></span><br><span class="line">           start++;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if(n%2==1)&#123;</span><br><span class="line">           res[start][start]=min;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际表达出来仅仅是while加4个for,简洁明了，这就是代码的魅力所在啊</p>
<p>loop、start、n，三者控制 i、j的位置，然后就min一直加下去。</p>
<p>n-loop,让我想起经典勾股定理证明图形，4个长方形加中间正方形等于大正方形。</p>
<p>我逐渐明白了一切.jpg</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day1|数组、二分、移除</title>
    <url>/2023/03/15/day1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="代码随想录算法训练营Day1-数组、二分、移除"><a href="#代码随想录算法训练营Day1-数组、二分、移除" class="headerlink" title="代码随想录算法训练营Day1|数组、二分、移除"></a>代码随想录算法训练营Day1|数组、二分、移除</h1><h2 id="数组理论（非常基础的数据结构）"><a href="#数组理论（非常基础的数据结构）" class="headerlink" title="数组理论（非常基础的数据结构）"></a>数组理论（非常基础的数据结构）</h2><p>当初学408的时候，甚至追到大一的c语言课程，数组都是非常重要的知识点，理解起来并没有那么困难，不过直到如今指针依然是让我脑壳疼的存在，也不是地址的连续性与计算。非要描述的话，就是定义、描述？</p>
<p>数组就像是队伍的行列，也可以打个比方为生物课本里一排排的植物细胞显微镜下的状态……一个细胞占一小段连续的内存。只要知道基准点和下标，地址非常好求，按图索骥。</p>
<p>对，二维数组指针让人头疼，每行的首指针貌似（记忆过于久远了），不过这针对的是c语言，个人目前打算研究Java。而Java没有指针真是个好消息。而Java的二维数组嘛，就像是不同的书的名字，每个名字后面跟着目录，从一开始就互不关联。</p>
<p>说回数组本身，408简直不能忽视。数据结构就不用多说了，与其相似的还有栈、链表，数组可以用链表表示，不过过于麻烦。图，广度搜索、深度搜索等等都是以数组为基础（今年代码题竟然不考算法，考图，我……）。排序、搜索不用多说。计网pass，计网都是各种协议。操作系统的文件系统与数组的内存可以说是差不离，都是以起始点，每个文件的大小来进行计算，不同的大概只有文件系统需要考虑的位数指代多少内存。计组，与操作系统同理，深化到了程序指令的内存地址。荣耀归于计算机组成原理——  只要会计组，操作系统简直不在话下（问题是我寄了啊啊啊……）  如果数组不熟练，我会翻出王道书和C primer plus再看一遍，真的，关于数组过长时间没看过了。</p>
<h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/binary-search/">力扣</a></p>
<p>408数据结构接触过（但是你没实操啊没实操），变形我记得可以用双指针法，历年真题里面不少双指针，王道甚至某一年的真题给的三指针震撼我一整年。虽然，咳，这题暂时还没那么高大上……</p>
<p>简而言之就是明确界限，左边界限、右边界限、由此确定的中间的比较值。根据比较值与目标值的比较大小关系再把中间值定为新的左or右界限，取新中间值，如此往复直到找到。</p>
<p>虽然思路很明确，但是对我来说最大的问题是——不知道如何下手。</p>
<p>定义谁？for循环肯定是双层，判断条件怎么写，就是一头雾水。</p>
<p>所以说啊（痛心疾首），实践出真知，你纸上谈兵不还是什么都没干吗？这是我用一年得出的惨痛教训T_T</p>
<p>先定义左右，然后是middle，不过首先是while循环这个我倒是没想到的，比较之后如何确定新边界是个关键点。由此引申出区间的定义，要不要最右边的那个数。两种定义，写法会有微妙的不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">         int left = 0;</span><br><span class="line">         int right = nums.length-1;</span><br><span class="line">         while(left &lt;= right)&#123;</span><br><span class="line">             int middle = left +((right - left)/2);// &gt;&gt;1 位运算呐</span><br><span class="line">             if(nums[middle] &gt; target)&#123;</span><br><span class="line">                 right = middle - 1;</span><br><span class="line">             &#125;else if (nums[middle] &lt; target)&#123;</span><br><span class="line">                 left = middle + 1;</span><br><span class="line">             &#125;else &#123;</span><br><span class="line">                 return middle;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（全比较版本）</p>
<p>抛去右边的话（因为递增顺序，右边一般来说不用），while循环直接&lt;,length不减，左区间重定位middle，右区间保持middle+1。</p>
<p>size（）函数不能用，面对编译一脸懵逼，上次编译失败是‘ ‘这对符号错误，而且又和指针有关，最后也没解决…… Java，果然还是用length</p>
<h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><style></style>

<p>题目链接：<a href="https://leetcode.cn/problems/remove-element/">力扣</a></p>
<p>简单地删除元素就没什么好说的，直接遍历for走起，问题是，这是数组，只能覆盖，突然就觉得链表不那么面目可憎了（</p>
<p>双指针真是太好用了，暴力解速度没问题但是内存稍微高一点。每日一轮自己的实操。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">         int num=nums.length;</span><br><span class="line">         for(int i=0;i&lt;num;i++)&#123;</span><br><span class="line">              if(nums[i]==val)&#123;</span><br><span class="line">                for(int j=i+1;j&lt;num;j++)&#123;</span><br><span class="line">                    nums[j-1]=nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            i--;</span><br><span class="line">            num--;</span><br><span class="line">         &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      return num;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是快慢指针，简而言之就是把快指针遍历过的元素用慢指针在原数组上原地誊写。遇到要删除的元素，快指针跳过，慢指针无情把这格覆盖掉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int removeElement(int[] nums, int val) &#123;</span><br><span class="line">         int slowIndex = 0;</span><br><span class="line">        for (int fastIndex = 0; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            if (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return slowIndex;</span><br><span class="line">    &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此处用的是代码随想录上的示例代码。</p>
<h2 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h2><p>二分查找除了704，还有35 34两题，有空要看看。</p>
<p>marktext真好用啊，typora付费有点不舍，可惜如果我要买点什么我会先打算买marginnote 3</p>
<p>痛苦做毕设，等毕设做完就能愉快搞代码了</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day10|栈 232 225</title>
    <url>/2023/03/24/day10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="栈-队列的理论基础"><a href="#栈-队列的理论基础" class="headerlink" title="栈 队列的理论基础"></a>栈 队列的理论基础</h2><p>栈，熟悉又友好的结构，408里面关于栈的不美好记忆大概是 运算符号的位置栈进栈出，左缀右缀，很好理解就是不好写。选择题很简单，算法题一般不考栈，我对栈的印象只停留在原理。 现在要实操（望天</p>
<p>C++ stl库里有栈和队列两个数据结构  此处使用SGI STL</p>
<p>栈的内部结构主要就是数组以及链表                  vector deque list</p>
<p>deque 双向队列 底层</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std::stack&lt;int, std::vector&lt;int&gt; &gt; third;  </span><br><span class="line">std::queue&lt;int, std::list&lt;int&gt;&gt; third; </span><br></pre></td></tr></table></figure>

<p>以上为C++实例</p>
<h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232 用栈实现队列"></a>232 用栈实现队列</h2><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">力扣题目链接</a></p>
<p>队列</p>
<p>push放入尾部 </p>
<p> pop首部移除</p>
<p> peek返回首部</p>
<p> empty 判断</p>
<p>和之前的设计链表一样都是要抽象函数，进行基础编写。</p>
<p>栈只有一个端口一进一出，队列双端都在，需要两个栈。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyQueue &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stackIn;</span><br><span class="line">    Stack&lt;Integer&gt; stackOut;</span><br><span class="line"></span><br><span class="line">    public MyQueue() &#123;</span><br><span class="line"></span><br><span class="line">        stackIn = new Stack&lt;&gt;();            //初始</span><br><span class="line">        stackOut = new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void push(int x) &#123;         //放入</span><br><span class="line"></span><br><span class="line">         stackIn.push(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int pop() &#123;             //移除</span><br><span class="line"></span><br><span class="line">        placetackIn();</span><br><span class="line">        return stackOut.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int peek() &#123;           //返回</span><br><span class="line"></span><br><span class="line">         placetackIn();</span><br><span class="line">         return stackOut.peek();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean empty() &#123;     //都空</span><br><span class="line"></span><br><span class="line">         return stackIn.isEmpty() &amp;&amp; stackOut.isEmpty();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void placetackIn()&#123;      //转移</span><br><span class="line">        if(!stackOut.isEmpty())</span><br><span class="line">             return;</span><br><span class="line">        while(!stackIn.isEmpty())&#123;      //这里是while</span><br><span class="line">            stackOut.push(stackIn.pop());</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyQueue object will be instantiated and called as such:</span><br><span class="line"> * MyQueue obj = new MyQueue();</span><br><span class="line"> * obj.push(x);</span><br><span class="line"> * int param_2 = obj.pop();</span><br><span class="line"> * int param_3 = obj.peek();</span><br><span class="line"> * boolean param_4 = obj.empty();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h2><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">力扣题目链接</a></p>
<p>两个互相实现啊，但是队列的顺序怎么实现栈，队列顺序是固定的又不能翻转</p>
<p>没想到另一个是用来备份的，队列出就全出没有取巧</p>
<p>queue or deque</p>
<p>甚至还可以优化成一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyStack &#123;</span><br><span class="line"></span><br><span class="line">      Queue&lt;Integer&gt; queue1; </span><br><span class="line">      Queue&lt;Integer&gt; queue2; </span><br><span class="line"></span><br><span class="line">    public MyStack() &#123;</span><br><span class="line"></span><br><span class="line">      queue1= new LinkedList&lt;&gt;();</span><br><span class="line">      queue2 = new LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void push(int x) &#123;</span><br><span class="line"></span><br><span class="line">      queue2.offer(x);</span><br><span class="line">      while(!queue1.isEmpty())&#123;</span><br><span class="line">          queue2.offer(queue1.poll());</span><br><span class="line">      &#125;   </span><br><span class="line">      Queue&lt;Integer&gt;  queueTemp;</span><br><span class="line">      queueTemp = queue1;</span><br><span class="line">      queue1 = queue2;</span><br><span class="line">      queue2 = queueTemp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int pop() &#123;</span><br><span class="line"></span><br><span class="line">       return queue1.poll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int top() &#123;</span><br><span class="line"></span><br><span class="line">       return queue1.peek();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean empty() &#123;</span><br><span class="line">    </span><br><span class="line">       return queue1.isEmpty();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyStack object will be instantiated and called as such:</span><br><span class="line"> * MyStack obj = new MyStack();</span><br><span class="line"> * obj.push(x);</span><br><span class="line"> * int param_2 = obj.pop();</span><br><span class="line"> * int param_3 = obj.top();</span><br><span class="line"> * boolean param_4 = obj.empty();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>一个的话，原地排列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void push(int x) &#123;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">        int size = queue.size();</span><br><span class="line">        while (size-- &gt; 1)   //这个判断式</span><br><span class="line">            queue.offer(queue.poll());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>deque没见过结构，虽然知道是队列，替换一下命令就ok了</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day11|栈与队列 20 1047 150</title>
    <url>/2023/03/25/day11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h2><p><a href="https://leetcode.cn/problems/valid-parentheses/">力扣题目链接</a></p>
<p>昨天提到括号，今天这不是就来了吗，虽然不是代数式，但是相差不远。思路我还是知道的，栈的栈进栈出，符合条件进，遇到右括号出。</p>
<p>没从代数式的思路跳出来，检测到左括号进右括号没反应过来，直接和右括号对应啊，粗暴直接。</p>
<p>deque.pop()?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isValid(String s) &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = new LinkedList&lt;&gt;();</span><br><span class="line">        char ch;</span><br><span class="line">        for(int i = 0; i &lt; s.length();i++)&#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            if(ch == &#x27;(&#x27;)&#123;</span><br><span class="line">                deque.push(&#x27;)&#x27;);</span><br><span class="line">            &#125;else if(ch == &#x27;&#123;&#x27;)&#123;</span><br><span class="line">                deque.push(&#x27;&#125;&#x27;);</span><br><span class="line">            &#125;else if(ch == &#x27;[&#x27;)&#123;</span><br><span class="line">                deque.push(&#x27;]&#x27;);</span><br><span class="line">            &#125;else if(deque.isEmpty()||deque.peek() != ch)&#123; //判断匹配</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else&#123;  </span><br><span class="line">                deque.pop();   //匹配就弹出啊</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047 删除字符串中的所有相邻重复项"></a>1047 删除字符串中的所有相邻重复项</h2><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">力扣题目链接</a></p>
<p>遍历，判断栈里与下一个是否相同，继续遍历还是开删，不过忘了反转。没有讲的简练。</p>
<p><strong>栈，字符串为栈，双指针</strong>，学海无涯。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String removeDuplicates(String s) &#123;</span><br><span class="line">         ArrayDeque&lt;Character&gt; deque = new ArrayDeque&lt;&gt;();</span><br><span class="line">         char ch;</span><br><span class="line">         for(int i = 0;i&lt;s.length();i++)&#123;</span><br><span class="line">             ch = s.charAt(i);</span><br><span class="line">             if(deque.isEmpty() || deque.peek() != ch)&#123;</span><br><span class="line">                 deque.push(ch);</span><br><span class="line">             &#125;else&#123;</span><br><span class="line">                 deque.pop();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         String str = &quot;&quot;;</span><br><span class="line">         while(!deque.isEmpty())&#123;        //用这种方式解决反转的啊</span><br><span class="line">             str = deque.pop() + str;</span><br><span class="line">         &#125;</span><br><span class="line">         return str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串为栈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int top = -1;</span><br><span class="line">for (int i = 0; i &lt; s.length(); i++) &#123;</span><br><span class="line">   char c = s.charAt(i);</span><br><span class="line">   </span><br><span class="line">if (top &gt;= 0 &amp;&amp; res.charAt(top) == c) &#123;</span><br><span class="line">         res.deleteCharAt(top);</span><br><span class="line">         top--;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         res.append(c);</span><br><span class="line">         top++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>双指针</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(fast &lt; s.length())&#123;</span><br><span class="line">       ch[slow] = ch[fast];</span><br><span class="line">       if(slow &gt; 0 &amp;&amp; ch[slow] == ch[slow - 1])&#123;</span><br><span class="line">                slow--;</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">                slow++;              //略有点忘了</span><br><span class="line">          &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150 逆波兰表达式求值"></a>150 逆波兰表达式求值</h2><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">力扣题目链接</a></p>
<p>逆波兰表达式就是后缀表达式啊，那没事了，我完全理解了。</p>
<p>数字你只管进，计算由进来的第一个运算符来想.jpg</p>
<p>进数字，遇到运算符弹出去，计算完再填进来，如此这般，完事。</p>
<p><del>虽然我没写过我有罪</del></p>
<p>看的是官方解答，switch好久没看见了，差点就忘了这么一个循环语句的存在。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int evalRPN(String[] tokens) &#123;</span><br><span class="line">        int n = tokens.length;</span><br><span class="line">        int[] stack = new int[(n + 1) / 2];    //长度</span><br><span class="line">        int index = -1;               //-1?</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            String token = tokens[i];</span><br><span class="line">            switch (token) &#123;</span><br><span class="line">                case &quot;+&quot;:</span><br><span class="line">                    index--;</span><br><span class="line">                    stack[index] += stack[index + 1];</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;-&quot;:</span><br><span class="line">                    index--;</span><br><span class="line">                    stack[index] -= stack[index + 1];</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;*&quot;:</span><br><span class="line">                    index--;</span><br><span class="line">                    stack[index] *= stack[index + 1];</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;/&quot;:</span><br><span class="line">                    index--;</span><br><span class="line">                    stack[index] /= stack[index + 1];</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    index++;</span><br><span class="line">                    stack[index] = Integer.parseInt(token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return stack[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路虽然早就知道了，但是细枝末节我还是不行，还有好长的路要走。</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day13|栈与队列 239 347</title>
    <url>/2023/03/27/day13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239  滑动窗口最大值"></a>239  滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">力扣题目链接</a></p>
<p>用队列，暴力解遍历。但显然最优解不是这个。队列有返回最大值的函数是挺理想的，问题是需要自己构建函数。如何构建？</p>
<p>单调队列，维护最大值始终在队列里怎么搞，难不成前后端都要比较吗？</p>
<p>进去的需要比较，思路模糊还是不会。看了代码随想录，我还是比较倾向于第二种。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] maxSlidingWindow(int[] nums, int k) &#123;</span><br><span class="line">        ArrayDeque&lt;Integer&gt; deque = new ArrayDeque&lt;&gt;();</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int[] res = new int[n - k + 1];</span><br><span class="line">        int idx = 0;</span><br><span class="line">        for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            while(!deque.isEmpty() &amp;&amp; deque.peek() &lt; i - k + 1)&#123;</span><br><span class="line">                deque.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            while(!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            deque.offer(i);</span><br><span class="line">            if(i &gt;= k - 1)&#123;</span><br><span class="line">                res[idx++] = nums[deque.peek()];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="347-前K个高频元素"><a href="#347-前K个高频元素" class="headerlink" title="347 前K个高频元素"></a>347 前K个高频元素</h2><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">力扣题目链接</a></p>
<p>然而我一眼看的时候觉得用哈希不错，细看不对，数组而不是字母，哈希表查找起来量级不太行还要不断更新。没想到是堆，这个数据结构有讲，不过比较简略，真正的实施并没有，寄，不会。而且用队列实现堆，呃，二叉树我没见过用队列的示例（跪   </p>
<p>好吧，原来还是用了哈希  map</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int[] topKFrequent(int[] nums, int k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for(int num:nums)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,0)+1);</span><br><span class="line">        &#125;</span><br><span class="line">                            //从队头到队尾从小到大 priorityqueue</span><br><span class="line">        PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((pair1,pair2)-&gt;pair1[1]-pair2[1]);</span><br><span class="line">        for(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            if(pq.size()&lt;k)&#123;</span><br><span class="line">                pq.add(new int[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if(entry.getValue()&gt;pq.peek()[1])&#123;</span><br><span class="line">                    pq.poll();       //弹出最少</span><br><span class="line">                    pq.add(new int[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int[] ans = new int[k];</span><br><span class="line">        for(int i=k-1;i&gt;=0;i--)&#123;</span><br><span class="line">            ans[i] = pq.poll()[0];</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day14|二叉树理论基础 遍历</title>
    <url>/2023/03/28/day14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="二叉树理论基础"><a href="#二叉树理论基础" class="headerlink" title="二叉树理论基础"></a>二叉树理论基础</h2><p>没想到今天全都是二叉树基础，不过也不算意外，毕竟二叉树应用很多（题也很多），道阻且深，408数据结构二叉树也一堆题，困扰我的反而是计算，理解问题不大。</p>
<p>完全二叉树，概念√</p>
<p>平衡二叉搜索树，子树高度差不超过1，红黑树相关（改考纲你一直没考……）与map set multimap multiset 相关</p>
<p>链式 顺序 b树相关 b+</p>
<p>bps wps 遍历 前中后序  层次（可用递归</p>
<p>中左右 左中右 左右中    栈</p>
<p>C++定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>java定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">  	TreeNode left;</span><br><span class="line">  	TreeNode right;</span><br><span class="line">  	TreeNode() &#123;&#125;</span><br><span class="line">  	TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="line">  	TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">    		this.val = val;</span><br><span class="line">    		this.left = left;</span><br><span class="line">    		this.right = right;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二叉树遍历递归-144-94-145"><a href="#二叉树遍历递归-144-94-145" class="headerlink" title="二叉树遍历递归 144 94 145"></a>二叉树遍历递归 144 94 145</h2><p>容易用于遍历，广度 深度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 前序遍历</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        preorder(root, result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preorder(TreeNode root, List&lt;Integer&gt; result) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(root.val);</span><br><span class="line">        preorder(root.left, result);</span><br><span class="line">        preorder(root.right, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 中序遍历</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void inorder(TreeNode root, List&lt;Integer&gt; list) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(root.left, list);</span><br><span class="line">        list.add(root.val);             // 注意这一句</span><br><span class="line">        inorder(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 后序遍历</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        postorder(root, res);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void postorder(TreeNode root, List&lt;Integer&gt; list) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        postorder(root.left, list);</span><br><span class="line">        postorder(root.right, list);</span><br><span class="line">        list.add(root.val);             // 注意这一句</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>C</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前序遍历：</span><br><span class="line">void preOrder(struct TreeNode* root, int* ret, int* returnSize) &#123;</span><br><span class="line">    if(root == NULL)</span><br><span class="line">        return;</span><br><span class="line">    ret[(*returnSize)++] = root-&gt;val;</span><br><span class="line">    preOrder(root-&gt;left, ret, returnSize);</span><br><span class="line">    preOrder(root-&gt;right, ret, returnSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* preorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int* ret = (int*)malloc(sizeof(int) * 100);</span><br><span class="line">    *returnSize = 0;</span><br><span class="line">    preOrder(root, ret, returnSize);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//中序遍历：</span><br><span class="line">void inOrder(struct TreeNode* node, int* ret, int* returnSize) &#123;</span><br><span class="line">    if(!node)</span><br><span class="line">        return;</span><br><span class="line">    inOrder(node-&gt;left, ret, returnSize);</span><br><span class="line">    ret[(*returnSize)++] = node-&gt;val;</span><br><span class="line">    inOrder(node-&gt;right, ret, returnSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* inorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int* ret = (int*)malloc(sizeof(int) * 100);</span><br><span class="line">    *returnSize = 0;</span><br><span class="line">    inOrder(root, ret, returnSize);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//后序遍历：</span><br><span class="line">void postOrder(struct TreeNode* node, int* ret, int* returnSize) &#123;</span><br><span class="line">    if(node == NULL) </span><br><span class="line">        return;</span><br><span class="line">    postOrder(node-&gt;left, ret, returnSize);</span><br><span class="line">    postOrder(node-&gt;right, ret, returnSize);</span><br><span class="line">    ret[(*returnSize)++] = node-&gt;val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* postorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int* ret= (int*)malloc(sizeof(int) * 100);</span><br><span class="line">    *returnSize = 0;</span><br><span class="line">    postOrder(root, ret, returnSize);</span><br><span class="line">    return ret;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>C要用指针，万恶的指针</p>
<p>复习了一遍前后序，伪代码和真代码还是有很大不同的，只能说记牢规范吧</p>
<h2 id="二叉树的统一迭代法"><a href="#二叉树的统一迭代法" class="headerlink" title="二叉树的统一迭代法"></a>二叉树的统一迭代法</h2><p>决定还是直接上统一迭代法了，不统一记起来有点麻烦。而且统一迭代并没有那么难。插入NULL为标志罢了。408数据结构貌似有非递归的不过忘了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; result = new LinkedList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();</span><br><span class="line">        if (root != null) st.push(root);</span><br><span class="line">        while (!st.empty()) &#123;</span><br><span class="line">            TreeNode node = st.peek();</span><br><span class="line">           </span><br><span class="line">         if (node != null) &#123;</span><br><span class="line">                st.pop();       // 弹出</span><br><span class="line">                if (node.right!=null) st.push(node.right);  </span><br><span class="line">                if (node.left!=null) st.push(node.left);    </span><br><span class="line">                st.push(node);                // 中节点</span><br><span class="line">                st.push(null); // 访问过中节点 标记</span><br><span class="line">                </span><br><span class="line">            &#125; else &#123;          // 空节点</span><br><span class="line">                st.pop();          </span><br><span class="line">                node = st.peek();   </span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;         </span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; result = new LinkedList&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();</span><br><span class="line">    if (root != null) st.push(root);</span><br><span class="line">    while (!st.empty()) &#123;</span><br><span class="line">        TreeNode node = st.peek();</span><br><span class="line">        </span><br><span class="line">      if (node != null) &#123;</span><br><span class="line">            st.pop(); /</span><br><span class="line">            if (node.right!=null) st.push(node.right);  </span><br><span class="line">            st.push(node);                          </span><br><span class="line">            st.push(null); </span><br><span class="line">            if (node.left!=null) st.push(node.left);  </span><br><span class="line">  </span><br><span class="line">        &#125; else &#123; </span><br><span class="line">            st.pop();           </span><br><span class="line">            node = st.peek();    </span><br><span class="line">            st.pop();</span><br><span class="line">            result.add(node.val); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">   public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;Integer&gt; result = new LinkedList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();</span><br><span class="line">        if (root != null) st.push(root);</span><br><span class="line">        while (!st.empty()) &#123;</span><br><span class="line">            TreeNode node = st.peek();</span><br><span class="line">            </span><br><span class="line">         if (node != null) &#123;</span><br><span class="line">                st.pop(); </span><br><span class="line">                st.push(node);                          </span><br><span class="line">                st.push(null); </span><br><span class="line">                if (node.right!=null) st.push(node.right); </span><br><span class="line">                if (node.left!=null) st.push(node.left);          </span><br><span class="line">                               </span><br><span class="line">            &#125; else &#123; </span><br><span class="line">                st.pop();           </span><br><span class="line">                node = st.peek();    </span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意中间5句的顺序</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day15|层序 226 101</title>
    <url>/2023/03/30/day15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">力扣题目链接</a></p>
<p>没什么好说的，就是模板</p>
<pre><code>class Solution &#123;
    public List&lt;List&lt;Integer&gt;&gt; resList = new ArrayList&lt;List&lt;Integer&gt;&gt;();
    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;
        //checkFun01(root,0); ？
        checkFun02(root);    

        return resList;
    &#125;


    public void checkFun01(TreeNode node, Integer deep) &#123;
        if (node == null) return;
        deep++;

        if (resList.size() &lt; deep) &#123;
            List&lt;Integer&gt; item = new ArrayList&lt;Integer&gt;();
            resList.add(item);
        &#125;
        resList.get(deep - 1).add(node.val);   //?

        checkFun01(node.left, deep);
        checkFun01(node.right, deep);
    &#125;
</code></pre>
<p> 107.二叉树的层次遍历 II   数组反转</p>
<p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">力扣题目链接</a></p>
<p>199.二叉树的右视图   最右侧</p>
<p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">力扣题目链接</a></p>
<p>637.二叉树的层平均值  double</p>
<p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">力扣题目链接</a></p>
<p>429.N叉树的层序遍历  children</p>
<p><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">力扣题目链接</a></p>
<p>515.在每个树行中找最大值   for?if?    二元</p>
<p><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">力扣题目链接</a></p>
<p>116.填充每个节点的下一个右侧节点指针  # 117.填充每个节点的下一个右侧节点指针II  b树？不过的确不知道怎么设    <a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/">力扣题目链接</a>  <a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/">力扣题目链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public Node connect(Node root) &#123;</span><br><span class="line">	Queue&lt;Node&gt; tmpQueue = new LinkedList&lt;Node&gt;();</span><br><span class="line">	if (root != null) tmpQueue.add(root);</span><br><span class="line"></span><br><span class="line">	while (tmpQueue.size() != 0)&#123;</span><br><span class="line">	    int size = tmpQueue.size();</span><br><span class="line"></span><br><span class="line">            Node cur = tmpQueue.poll();</span><br><span class="line">            if (cur.left != null) tmpQueue.add(cur.left);</span><br><span class="line">            if (cur.right != null) tmpQueue.add(cur.right);</span><br><span class="line"></span><br><span class="line">	    for (int index = 1; index &lt; size; index++)&#123;</span><br><span class="line">		Node next = tmpQueue.poll();</span><br><span class="line">		if (next.left != null) tmpQueue.add(next.left);</span><br><span class="line">		if (next.right != null) tmpQueue.add(next.right);</span><br><span class="line"></span><br><span class="line">                cur.next = next;</span><br><span class="line">                cur = next;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public Node connect(Node root) &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        if (root != null) &#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            Node node = null;</span><br><span class="line">            Node nodePre = null;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                if (i == 0) &#123;</span><br><span class="line">                    nodePre = queue.poll(); // 取出</span><br><span class="line">                    node = nodePre;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    node = queue.poll();</span><br><span class="line">                    nodePre.next = node; // 链接</span><br><span class="line">                    nodePre = nodePre.next;</span><br><span class="line">                &#125;</span><br><span class="line">                if (node.left != null) &#123;</span><br><span class="line">                    queue.add(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                if (node.right != null) &#123;</span><br><span class="line">                    queue.add(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nodePre.next = null; </span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">力扣题目链接</a></p>
<p>层序 模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxDepth(TreeNode root) &#123;</span><br><span class="line">        if (root == null)   return 0;</span><br><span class="line">        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();</span><br><span class="line">        que.offer(root);</span><br><span class="line">        int depth = 0;</span><br><span class="line">        while (!que.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            int len = que.size();</span><br><span class="line">            while (len &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode node = que.poll();</span><br><span class="line">                if (node.left != null)  que.offer(node.left);</span><br><span class="line">                if (node.right != null) que.offer(node.right);</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        return depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">力扣题目链接</a></p>
<p>层次  比较</p>
<pre><code>class Solution &#123;
    public int minDepth(TreeNode root)&#123;
        if (root == null) &#123;
            return 0;
        &#125;
        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();
        queue.offer(root);
        int depth = 0;
        while (!queue.isEmpty())&#123;
            int size = queue.size();
            depth++;
            TreeNode cur = null;
            for (int i = 0; i &lt; size; i++) &#123;
                cur = queue.poll();
                if (cur.left == null &amp;&amp; cur.right == null)&#123;
                    return depth;
                &#125;
                if (cur.left != null) queue.offer(cur.left);
                if (cur.right != null) queue.offer(cur.right);
            &#125;
        &#125;
        return depth;
    &#125;
&#125; 
</code></pre>
<h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226 翻转二叉树"></a>226 翻转二叉树</h2><p><a href="https://leetcode.cn/problems/invert-binary-tree/">力扣题目链接</a> </p>
<p>首先，链表 但不是链表     temp？过于……</p>
<p>更加倾向于层次，层次更加符合对称那种感觉</p>
<p>……swap下意识跳了</p>
<p>办法竟然这么多 递归 迭代 深度 层次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public TreeNode invertTree(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        swapChildren(root);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void swapChildren(TreeNode root) &#123;</span><br><span class="line">        TreeNode tmp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = tmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public TreeNode invertTree(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;return null;&#125;</span><br><span class="line">        ArrayDeque&lt;TreeNode&gt; deque = new ArrayDeque&lt;&gt;();</span><br><span class="line">        deque.offer(root);</span><br><span class="line">        while (!deque.isEmpty()) &#123;</span><br><span class="line">            int size = deque.size();</span><br><span class="line">            while (size-- &gt; 0) &#123;</span><br><span class="line">                TreeNode node = deque.poll();</span><br><span class="line">                swap(node);</span><br><span class="line">                if (node.left != null) deque.offer(node.left);</span><br><span class="line">                if (node.right != null) deque.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void swap(TreeNode root) &#123;</span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101 对称二叉树"></a>101 对称二叉树</h2><p><a href="https://leetcode.cn/problems/symmetric-tree/">力扣题目链接</a></p>
<p>前后序啊，，同时进行中序遍历是不现实的，所指对象一直在变动，你该如何对left right做出指控？</p>
<p>栈和队列的邪教 受教了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean isSymmetric3(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; deque = new LinkedList&lt;&gt;();</span><br><span class="line">        deque.offer(root.left);</span><br><span class="line">        deque.offer(root.right);</span><br><span class="line">        while (!deque.isEmpty()) &#123;</span><br><span class="line">            TreeNode leftNode = deque.poll();</span><br><span class="line">            TreeNode rightNode = deque.poll();</span><br><span class="line">            if (leftNode == null &amp;&amp; rightNode == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if (leftNode == null || rightNode == null || leftNode.val != rightNode.val) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offer(leftNode.left);</span><br><span class="line">            deque.offer(rightNode.right);</span><br><span class="line">            deque.offer(leftNode.right);</span><br><span class="line">            deque.offer(rightNode.left);</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>今天的理解两极分化，要好好看视频。</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day16|二叉树 104 111 222</title>
    <url>/2023/03/29/day16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104 二叉树的最大深度"></a>104 二叉树的最大深度</h2><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">力扣题目链接</a></p>
<p>一眼深度遍历，高度是本节点而不是根节点</p>
<p>前序 深  后序 高    换个思路   后序求根节点高</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxDepth(TreeNode root) &#123;</span><br><span class="line">      if(root == null)&#123;</span><br><span class="line">          return 0;</span><br><span class="line">      &#125;</span><br><span class="line">      int  leftd = maxDepth(root.left);</span><br><span class="line">      int  rightd = maxDepth(root.right);</span><br><span class="line">      return Math.max(leftd,rightd)+1;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ans(TreeNode tr,int tmp)&#123;</span><br><span class="line">        if(tr==null) return;</span><br><span class="line">        tmp++;</span><br><span class="line">        maxnum = maxnum&lt;tmp?tmp:maxnum; // 二元</span><br><span class="line">        ans(tr.left,tmp);</span><br><span class="line">        ans(tr.right,tmp);</span><br><span class="line">        tmp--;</span><br></pre></td></tr></table></figure>

<p>除此之外迭代   查 加</p>
<pre><code>public int maxDepth(TreeNode root) &#123;
        if(root == null) &#123;
            return 0;
        &#125;
        Deque&lt;TreeNode&gt; deque = new LinkedList&lt;&gt;();
        deque.offer(root);
        int depth = 0;
        while (!deque.isEmpty()) &#123;
            int size = deque.size();
            depth++;
            for (int i = 0; i &lt; size; i++) &#123;
                TreeNode node = deque.poll();
                if (node.left != null) &#123;
                    deque.offer(node.left);
                &#125;
                if (node.right != null) &#123;
                    deque.offer(node.right);
                &#125;
            &#125;
        &#125;
        return depth;
    &#125;         
</code></pre>
<p>n叉树</p>
<pre><code>class Solution &#123;
    public int maxDepth(Node root) &#123;
        if(root == null)
              return 0;
        int deep = 0;
       Queue&lt;Node&gt; que = new LinkedList&lt;&gt;();
        que.offer(root);
        while(!que.isEmpty())&#123;
              deep ++;
              while(que.size())&#123;
                Node node = que.poll();
                for(int i = 0;i&lt; node.children.size();i++)&#123;
                  if(que.children.get(i)!= null)
                        que.offer(node.children.get(i));
                        len--;
                &#125;
              &#125;
              return deep;
        &#125;

    &#125;      
</code></pre>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111 二叉树的最小深度"></a>111 二叉树的最小深度</h2><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">力扣题目链接</a></p>
<p>层次一次，最小，注意根节点左右缺其1不算  ？ 找到就返回还需要比较（层次应该不用吧     左右比较原来如此</p>
<pre><code>public int minDepth(TreeNode root) &#123;
        if (root == null) &#123;
            return 0;
        &#125;
        int leftd = minDepth(root.left);
        int rightd = minDepth(root.right);
        if (root.left == null) &#123;
            return rightd + 1;
        &#125;
        if (root.right == null) &#123;
            return leftd + 1;
        &#125;
        // 左右结点都不为null
        return Math.min(leftDepth, rightDepth) + 1;
    &#125;

public int minDepth(TreeNode root) &#123;
        if (root == null) &#123;
            return 0;
        &#125;
        Deque&lt;TreeNode&gt; deque = new LinkedList&lt;&gt;();
        deque.offer(root);
        int depth = 0;
        while (!deque.isEmpty()) &#123;
            int size = deque.size();
            depth++;
            for (int i = 0; i &lt; size; i++) &#123;
                TreeNode poll = deque.poll();
                if (poll.left == null &amp;&amp; poll.right == null) &#123;
                    return depth;
                &#125;
                if (poll.left != null) &#123;
                    deque.offer(poll.left);
                &#125;
                if (poll.right != null) &#123;
                    deque.offer(poll.right);
                &#125;
            &#125;
        &#125;
        return depth;
    &#125;    
</code></pre>
<h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222 完全二叉树的节点个数"></a>222 完全二叉树的节点个数</h2><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">力扣题目链接</a></p>
<p>层次？还是直接用数学公式</p>
<p>数学，记录for循坏的i   不对不对不对，那样要switch好几种方案？</p>
<p>不，很难算，等等，要另开for 好吧 继续层次</p>
<pre><code> class Solution &#123;
    public int countNodes(TreeNode root) &#123;
        if(root == null) &#123;
            return 0;
        &#125;
        return countNodes(root.left) + countNodes(root.right) + 1;
    &#125;
&#125;      
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int countNodes(TreeNode root) &#123;</span><br><span class="line">        if (root == null) </span><br><span class="line">            return 0;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        int result = 0;</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            while (size  &gt; 0) &#123;</span><br><span class="line">                size--;</span><br><span class="line">                TreeNode cur = queue.poll();   //下一个</span><br><span class="line">                result++;</span><br><span class="line">                if (cur.left != null) queue.offer(cur.left);</span><br><span class="line">                if (cur.right != null) queue.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>满二叉树就简单多了 重点左子树   or递归</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day17|110 257 404</title>
    <url>/2023/03/30/day17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110 平衡二叉树"></a>110 平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/">力扣题目链接</a></p>
<p>平衡二叉树啊，令人熟悉，是红黑树的基础，是基础的关键。如何判断，递归，左右子树高度判断。递归是很重要的代码实现方式，必须要时常体会。迭代理解我反而更容易适应，但是代码反而比递归难一些。</p>
<pre><code>class Solution &#123;
    public boolean isBalanced(TreeNode root) &#123;
                return getHeight(root) != -1;
    &#125;

    private int getHeight(TreeNode root)&#123;
        if(root == null)
           return 0;

        int leftHeight = getHeight(root.left);
        if(leftHeight == -1)
            return -1;

        int rightHeight = getHeight(root.right);
        if(rightHeight == -1)
            return -1;

        if(Math.abs(leftHeight-rightHeight)&gt;1)&#123;
            return -1;
        &#125;

        return Math.max(leftHeight,rightHeight)+1;

    &#125;
&#125;
</code></pre>
<h2 id="257-二叉树的所有遍历"><a href="#257-二叉树的所有遍历" class="headerlink" title="257 二叉树的所有遍历"></a>257 二叉树的所有遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-paths/">力扣题目链接</a></p>
<p>递归遍历  （代码的字母 命名 符号错误找起来治血压</p>
<pre><code>class Solution &#123;
    public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123;
        List&lt;String&gt; res = new ArrayList&lt;&gt;();
        if(root == null)&#123;
            return res;
        &#125;
        List&lt;Integer&gt; paths = new ArrayList&lt;&gt;();
        traversal(root,paths,res);
        return res;

    &#125;

    private void traversal(TreeNode root,List&lt;Integer&gt; paths,List&lt;String&gt; res)&#123;
        paths.add(root.val);
        if(root.left == null &amp;&amp; root.right == null)&#123;
            StringBuilder midout = new StringBuilder();
            for(int i = 0;i&lt;paths.size()-1;i++)&#123;
                midout.append(paths.get(i)).append(&quot;-&gt;&quot;);
            &#125;
            midout.append(paths.get(paths.size()-1));
            res.add(midout.toString());
            return;
        &#125;

        if(root.left != null)&#123;
            traversal(root.left,paths,res);
            paths.remove(paths.size()-1);
        &#125;
        if(root.right != null)&#123;
            traversal(root.right,paths,res);
            paths.remove(paths.size()-1);
        &#125;

    &#125;
</code></pre>
<p>迭代</p>
<pre><code>public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123;
        List&lt;String&gt; result = new ArrayList&lt;&gt;();
        if (root == null)
            return result;
        Stack&lt;Object&gt; stack = new Stack&lt;&gt;();
        stack.push(root);
        stack.push(root.val + &quot;&quot;);
        while (!stack.isEmpty()) &#123;
            String path = (String) stack.pop();
            TreeNode node = (TreeNode) stack.pop();
            if (node.left == null &amp;&amp; node.right == null) &#123;
                result.add(path);
            &#125;
            if (node.right != null) &#123;
                stack.push(node.right);
                stack.push(path + &quot;-&gt;&quot; + node.right.val);
            &#125;
            if (node.left != null) &#123;
                stack.push(node.left);
                stack.push(path + &quot;-&gt;&quot; + node.left.val);
            &#125;
        &#125;
        return result;
    &#125;
&#125;
</code></pre>
<h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404 左叶子之和"></a>404 左叶子之和</h2><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">力扣题目链接</a></p>
<p>叶子在父节点左边</p>
<p>node-&gt;left != NULL &amp;&amp; node-&gt;left-&gt;left == NULL &amp;&amp; node-&gt;left-&gt;right == NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int sumOfLeftLeaves(TreeNode root) &#123;</span><br><span class="line">        if (root == null) return 0;</span><br><span class="line">        int leftValue = sumOfLeftLeaves(root.left);    </span><br><span class="line">        int rightValue = sumOfLeftLeaves(root.right);  </span><br><span class="line"></span><br><span class="line">        int real = 0;</span><br><span class="line">        if (root.left != null &amp;&amp; root.left.left == null &amp;&amp; root.left.right == null) &#123; </span><br><span class="line">            real = root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        int sum = real + leftValue + rightValue;  </span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归说简单但是逻辑是必须要捋顺的</p>
<p>层序迭代，比较直观</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int sumOfLeftLeaves(TreeNode root) &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        if (root == null) </span><br><span class="line">            return 0;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            while (size &gt; 0) &#123;</span><br><span class="line">                size--;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                if (node.left != null) &#123; </span><br><span class="line">                    queue.offer(node.left);    //</span><br><span class="line">                    if (node.left.left == null &amp;&amp; node.left.right == null)&#123; // 左叶子节点</span><br><span class="line">                        sum += node.left.val;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (node.right != null) </span><br><span class="line">                    queue.offer(node.right);  //这两句就是一层层下推</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day18|513 112 106</title>
    <url>/2023/03/31/day18/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="223-找树左下角的值"><a href="#223-找树左下角的值" class="headerlink" title="223 找树左下角的值"></a>223 找树左下角的值</h2><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">力扣题目链接</a></p>
<p>层序，递归毕竟确定的不一定是最后一层。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findBottomLeftValue(TreeNode root) &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        int res = 0;</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            for(int i = 0; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode poll = queue.poll();</span><br><span class="line">                if(i == 0)&#123;</span><br><span class="line">                    res = poll.val;</span><br><span class="line">                &#125;</span><br><span class="line">                if(poll.left != null)&#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                if(poll.right != null)&#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="112-路经总和"><a href="#112-路经总和" class="headerlink" title="112 路经总和"></a>112 路经总和</h2><p><a href="https://leetcode.cn/problems/path-sum/">力扣题目链接</a></p>
<p>不好说迭代好还是递归好，返回值单设变量？还是其他 不知道怎么设置判断条件</p>
<p>递归的代码有一点看不懂，不太行</p>
<p>迭代一路相加，递归一路相减</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class solution &#123;</span><br><span class="line">   public boolean haspathsum(treenode root, int targetsum) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        targetsum -= root.val;</span><br><span class="line">        if (root.left == null &amp;&amp; root.right == null) &#123;</span><br><span class="line">            return targetsum == 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.left != null) &#123;</span><br><span class="line">            boolean left = haspathsum(root.left, targetsum);</span><br><span class="line">            if (left) &#123;     </span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.right != null) &#123;</span><br><span class="line">            boolean right = haspathsum(root.right, targetsum);</span><br><span class="line">            if (right) &#123;     </span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public boolean haspathsum(treenode root, int targetsum) &#123;</span><br><span class="line">        if(root == null) return false;</span><br><span class="line">        stack&lt;treenode&gt; stack1 = new stack&lt;&gt;();</span><br><span class="line">        stack&lt;integer&gt; stack2 = new stack&lt;&gt;();</span><br><span class="line">        stack1.push(root);</span><br><span class="line">        stack2.push(root.val);</span><br><span class="line">        while(!stack1.isempty()) &#123;</span><br><span class="line">            int size = stack1.size();</span><br><span class="line">            for(int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                treenode node = stack1.pop();</span><br><span class="line">                int sum = stack2.pop();</span><br><span class="line"></span><br><span class="line">                if(node.left == null &amp;&amp; node.right == null &amp;&amp; sum == targetsum) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(node.right != null)&#123;</span><br><span class="line">                    stack1.push(node.right);</span><br><span class="line">                    stack2.push(sum + node.right.val);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(node.left != null) &#123;</span><br><span class="line">                    stack1.push(node.left);</span><br><span class="line">                    stack2.push(sum + node.left.val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>求路径总和 113</p>
<p>迭代反而不太行，怎么回溯路径，全记录路径太占空间了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; pathsum(TreeNode root, int targetsum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        if (root == null) </span><br><span class="line">            return res；</span><br><span class="line">        List&lt;Integer&gt; path = new LinkedList&lt;&gt;();</span><br><span class="line">        preorderdfs(root, targetsum, res, path);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preorderdfs(TreeNode root, int targetsum, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path) &#123;</span><br><span class="line">        path.add(root.val);</span><br><span class="line">        if (root.left == null &amp;&amp; root.right == null) &#123;</span><br><span class="line">            if (targetsum - root.val == 0) &#123;</span><br><span class="line">                res.add(new ArrayList&lt;&gt;(path));</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (root.left != null) &#123;</span><br><span class="line">            preorderdfs(root.left, targetsum - root.val, res, path);</span><br><span class="line">            path.remove(path.size() - 1);  //返回上一层，递归 香槟塔</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.right != null) &#123;</span><br><span class="line">            preorderdfs(root.right, targetsum - root.val, res, path);</span><br><span class="line">            path.remove(path.size() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106 从中序与后序遍历序列构造二叉树"></a>106 从中序与后序遍历序列构造二叉树</h2><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">力扣题目链接</a></p>
<p>用中序遍历和后序遍历确定二叉树是可以做到的，不过如何用程序实现，是个问题，这个我确实没什么思路，我不会，看视频。</p>
<p>如果不为空，那么取后序数组最后一个元素作为节点元素 找到后序数组最后一个元素在中序数组的位置，作为切割点 切割中序数组 切割后序数组 递归处理左区间和右区间</p>
<p>中后</p>
<pre><code>class Solution &#123;
    Map&lt;Integer, Integer&gt; map;  // 查找
    public TreeNode buildTree(int[] inorder, int[] postorder) &#123;
        map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; inorder.length; i++) &#123; // map保存
            map.put(inorder[i], i);
        &#125;

        return findNode(inorder,  0, inorder.length, postorder,0, postorder.length);  // 前闭后开
    &#125;
//前闭后开
    public TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder, int postBegin, int postEnd) &#123;

        if (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  // 不满足左闭右开 空
            return null;
        &#125;
        int rootIndex = map.get(postorder[postEnd - 1]);  // 后序最后一个在中序位置
        TreeNode root = new TreeNode(inorder[rootIndex]);  
        int lenOfLeft = rootIndex - inBegin;  // 确定后序个数
        root.left = findNode(inorder, inBegin, rootIndex,
                            postorder, postBegin, postBegin + lenOfLeft);
        root.right = findNode(inorder, rootIndex + 1, inEnd,
                            postorder, postBegin + lenOfLeft, postEnd - 1);

        return root;
    &#125;
&#125; 
</code></pre>
<p>前中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lass Solution &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    public TreeNode buildTree(int[] preorder, int[] inorder) &#123;</span><br><span class="line">        map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; inorder.length; i++) &#123; </span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return findNode(preorder, 0, preorder.length, inorder,  0, inorder.length);  // 前闭后开</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeNode findNode(int[] preorder, int preBegin, int preEnd, int[] inorder, int inBegin, int inEnd) &#123;</span><br><span class="line"></span><br><span class="line">        if (preBegin &gt;= preEnd || inBegin &gt;= inEnd) &#123;  </span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int rootIndex = map.get(preorder[preBegin]); </span><br><span class="line">        TreeNode root = new TreeNode(inorder[rootIndex]); </span><br><span class="line">        int lenOfLeft = rootIndex - inBegin;  </span><br><span class="line">        root.left = findNode(preorder, preBegin + 1, preBegin + lenOfLeft + 1,</span><br><span class="line">                            inorder, inBegin, rootIndex);</span><br><span class="line">        root.right = findNode(preorder, preBegin + lenOfLeft + 1, preEnd,</span><br><span class="line">                            inorder, rootIndex + 1, inEnd);</span><br><span class="line"></span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day20|654 617 700 98</title>
    <url>/2023/04/03/day20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654 最大二叉树"></a>654 最大二叉树</h2><p><a href="https://leetcode.cn/problems/maximum-binary-tree/">力扣题目地址</a></p>
<p>查找到最大值，然后左右两边递归构造二叉树，说来惭愧，二叉树的构建对我来说仍然是一个重点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode constructMaximumBinaryTree(int[] nums) &#123;</span><br><span class="line">        return constructMaximumBinaryTree1(nums, 0, nums.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeNode constructMaximumBinaryTree1(int[] nums, int leftIndex, int rightIndex) &#123;</span><br><span class="line">        if (rightIndex - leftIndex &lt; 1) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (rightIndex - leftIndex == 1) &#123;</span><br><span class="line">            return new TreeNode(nums[leftIndex]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int maxIndex = leftIndex;</span><br><span class="line">        int maxVal = nums[maxIndex];</span><br><span class="line">        for (int i = leftIndex + 1; i &lt; rightIndex; i++) &#123;</span><br><span class="line">            if (nums[i] &gt; maxVal)&#123;</span><br><span class="line">                maxVal = nums[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode root = new TreeNode(maxVal);</span><br><span class="line">        root.left = constructMaximumBinaryTree1(nums, leftIndex, maxIndex);</span><br><span class="line">        root.right = constructMaximumBinaryTree1(nums, maxIndex + 1, rightIndex);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>参考示例差点以为是双指针</del></p>
<p>得到最大值，然后左边右边都以相同的方法选出这一个节点，直至全部遍历完，想不到（</p>
<h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617 合并二叉树"></a>617 合并二叉树</h2><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/">力扣题目链接</a></p>
<p>事实证明遍历很重要，就是看你理不理解。回溯有时候真的容易转不过来弯</p>
<p>层次遍历是我初步的想法，不过看来遍历更加直白。</p>
<pre><code>class Solution &#123;
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123;
        if (root1 == null) 
            return root2;
        if (root2 == null) 
            return root1;
        root1.val += root2.val;

        root1.left = mergeTrees(root1.left,root2.left);
        root1.right = mergeTrees(root1.right,root2.right);

        return root1;
    &#125;
&#125;      

class Solution &#123;
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123;
        if (root1 == null) 
            return root2;
        if (root2 ==null) 
            return root1;

        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();

        queue.offer(root1);
        queue.offer(root2);

        while (!queue.isEmpty()) &#123;

            TreeNode node1 = queue.poll();
            TreeNode node2 = queue.poll();

            node1.val = node1.val + node2.val;
     //还需要分四种情况，反而觉得没递归好，逻辑问题
            if (node1.left != null &amp;&amp; node2.left != null) &#123;
                queue.offer(node1.left);
                queue.offer(node2.left);
            &#125;

            if (node1.right != null &amp;&amp; node2.right != null) &#123;
                queue.offer(node1.right);
                queue.offer(node2.right);
            &#125;

            if (node1.left == null &amp;&amp; node2.left != null) &#123;
                node1.left = node2.left;
            &#125;

            if (node1.right == null &amp;&amp; node2.right != null) &#123;
                node1.right = node2.right;
            &#125;
        &#125;
        return root1;
    &#125;
&#125; 
</code></pre>
<h2 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700 二叉搜索树中的搜索"></a>700 二叉搜索树中的搜索</h2><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">力扣题目地址</a></p>
<p>本来以为是广度遍历或者深度遍历，找到给定值，再找子树</p>
<p>但是我忘了这是二叉搜索树，本身就有一定的顺序，这里返回的是位置</p>
<pre><code> class Solution &#123;
    public TreeNode searchBST(TreeNode root, int val) &#123;
        if (root == null || root.val == val) &#123;
            return root;
        &#125;
        if (val &lt; root.val) &#123;
            return searchBST(root.left, val);
        &#125; else &#123;
            return searchBST(root.right, val);
        &#125;
    &#125;
&#125;  

 class Solution &#123;
    public TreeNode searchBST(TreeNode root, int val) &#123;
        while (root != null)&#123;

            if (val &lt; root.val)
               root = root.left;
            else if (val &gt; root.val) 
               root = root.right;

            else    
                return root;
           &#125;

        return null;
    &#125;
&#125;  
</code></pre>
<h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98 验证二叉搜索树"></a>98 验证二叉搜索树</h2><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">力扣题目链接</a></p>
<p>递归！  中陷阱了，附庸的附庸不一定是我的附庸，中间节点的左右界</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    TreeNode max;</span><br><span class="line">    public boolean isValidBST(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean left = isValidBST(root.left);</span><br><span class="line">        if (!left) &#123;     //空？</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (max != null &amp;&amp; root.val &lt;= max.val) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        max = root;</span><br><span class="line"></span><br><span class="line">        boolean right = isValidBST(root.right);</span><br><span class="line">        return right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>class Solution &#123;
    public boolean isValidBST(TreeNode root) &#123;
        if (root == null) &#123;
            return true;
        &#125;
        Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;();
        TreeNode pre = null;

        while (root != null || !stack.isEmpty()) &#123;  //||
、
            while (root != null) &#123;
                stack.push(root);
                root = root.left;
            &#125;
            TreeNode pop = stack.pop();
            if (pre != null &amp;&amp; pop.val &lt;= pre.val) &#123;
                return false;
            &#125;

            pre = pop;
            root = pop.right;
        &#125;
        return true;
    &#125;
&#125;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day22|235 701 450</title>
    <url>/2023/04/05/day22/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235 二叉搜索树的最近公共祖先"></a>235 二叉搜索树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">力扣题目链接</a></p>
<p>搜索树，指向性强了很多</p>
<p>不得不说递归的写法……很灵性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</span><br><span class="line">        if (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) return lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        if (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) return lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</span><br><span class="line">        while (true) &#123;     //while</span><br><span class="line">            if (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; else if (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701 二叉搜索树中的插入操作"></a>701 二叉搜索树中的插入操作</h2><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">力扣题目链接</a></p>
<p>本来以为还要做数值替换，突然想起来数值没有相同的，直接判断直到空节点。 迭代而没有遍历好用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode insertIntoBST(TreeNode root, int val) &#123;</span><br><span class="line">        if (root == null)</span><br><span class="line">            return new TreeNode(val);</span><br><span class="line">            </span><br><span class="line">        if (root.val &lt; val)&#123;</span><br><span class="line">            root.right = insertIntoBST(root.right, val); </span><br><span class="line">        &#125;else if (root.val &gt; val)&#123;</span><br><span class="line">            root.left = insertIntoBST(root.left, val); </span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode insertIntoBST(TreeNode root, int val) &#123;</span><br><span class="line">        if (root == null)   //不需要这一段吧</span><br><span class="line">            return new TreeNode(val);</span><br><span class="line">        TreeNode newroot = root;</span><br><span class="line">        TreeNode pre = root;</span><br><span class="line"></span><br><span class="line">        while (root != null) &#123;  //找父节点</span><br><span class="line">            pre = root;</span><br><span class="line">            if (root.val &gt; val) &#123;</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; else if (root.val &lt; val) &#123;</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (pre.val &gt; val) &#123;   //父节点左右</span><br><span class="line">            pre.left = new TreeNode(val);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            pre.right = new TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return newroot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450 删除二叉搜索树中的节点"></a>450 删除二叉搜索树中的节点</h2><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">力扣题目链接</a></p>
<p>问题是中间节点，让我想起来了堆排序，甚至还有红黑树？！</p>
<p>不过本题不提这个，递归……也麻烦起来了</p>
<p>5种情况其实都挺好理解，不过的确不知道怎么写才好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;          //外包装</span><br><span class="line">    public TreeNode deleteNode(TreeNode root, int key) &#123;</span><br><span class="line">        root = delete(root,key);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">              //递归主函数</span><br><span class="line">    private TreeNode delete(TreeNode root, int key) &#123;</span><br><span class="line">        if (root == null)   // 1</span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line">        if (root.val &gt; key) &#123;   //目标在父节点左</span><br><span class="line">            root.left = delete(root.left,key);</span><br><span class="line">        &#125; else if (root.val &lt; key) &#123;</span><br><span class="line">            root.right = delete(root.right,key);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (root.left == null)  //拐</span><br><span class="line">               return root.right;</span><br><span class="line">            if (root.right == null)</span><br><span class="line">               return root.left;</span><br><span class="line">            TreeNode tmp = root.right;  //旋转</span><br><span class="line">            while (tmp.left != null) &#123;</span><br><span class="line">                tmp = tmp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root.val = tmp.val;</span><br><span class="line">            root.right = delete(root.right,tmp.val);</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day21|530 501 236</title>
    <url>/2023/04/04/day21/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530 二叉搜索树的最小绝对差"></a>530 二叉搜索树的最小绝对差</h2><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/">力扣题目链接</a></p>
<p>任意两节点的差的绝对值的最小值，二叉树啊，可以直接遍历到数组中然后排序然后双指针吗 <del>快排？还是，双指针应该什么思路</del></p>
<p>加上指针不是太会，看了讲解才豁然开朗</p>
<p>每次最后用一下min</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    int result = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    public int getMinimumDifference(TreeNode root) &#123;</span><br><span class="line">       if(root==null)</span><br><span class="line">         return 0;</span><br><span class="line">       traversal(root);</span><br><span class="line">       return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void traversal(TreeNode root)&#123;</span><br><span class="line">        if(root==null)</span><br><span class="line">           return;</span><br><span class="line"></span><br><span class="line">        traversal(root.left);</span><br><span class="line"></span><br><span class="line">        if(pre!=null)&#123;</span><br><span class="line">            result = Math.min(result,root.val-pre.val);</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;          // 定位指针</span><br><span class="line">        traversal(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code> class Solution &#123;
    TreeNode pre;
    Stack&lt;TreeNode&gt; stack;
    public int getMinimumDifference(TreeNode root) &#123;
        if (root == null)       
            return 0;
        stack = new Stack&lt;&gt;();
        TreeNode cur = root;
        int result = Integer.MAX_VALUE;

        while (cur != null || !stack.isEmpty()) &#123;
            if (cur != null) &#123;
                stack.push(cur); 
                cur = cur.left; 
            &#125;else &#123;
                cur = stack.pop(); 
                if (pre != null) &#123; 
                    result = Math.min(result, cur.val - pre.val);
                &#125;

                pre = cur;
                cur = cur.right; 
            &#125;
        &#125;
        return result;
    &#125;
&#125;    
</code></pre>
<h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501 二叉搜索树中的众数"></a>501 二叉搜索树中的众数</h2><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">力扣题目链接</a></p>
<p>频率最高，刚开始以为哈希表重现，     毕竟已经是搜索了，不一定就是哈希</p>
<p>但是如果频率相同何如？</p>
<p>哈希</p>
<pre><code>class Solution &#123;
    public int[] findMode(TreeNode root) &#123;

        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
  
        if (root == null) 
        return list.stream().mapToInt(Integer::intValue).toArray();

        searchBST(root, map);
 //这段……
        List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; mapList = map.entrySet().stream()
                .sorted((c1, c2) -&gt; c2.getValue().compareTo(c1.getValue()))
                .collect(Collectors.toList());

        list.add(mapList.get(0).getKey());

        for (int i = 1; i &lt; mapList.size(); i++) &#123;
          if (mapList.get(i).getValue() == mapList.get(i - 1).getValue()) &#123;

                list.add(mapList.get(i).getKey());

            &#125; else &#123;
                break;
            &#125;
        &#125;
        return list.stream().mapToInt(Integer::intValue).toArray();
    &#125;

    void searchBST(TreeNode curr, Map&lt;Integer, Integer&gt; map) &#123;
        if (curr == null) 
            return;
        map.put(curr.val, map.getOrDefault(curr.val, 0) + 1);
        searchBST(curr.left, map);
        searchBST(curr.right, map);
    &#125;

&#125;  

class Solution &#123;
    ArrayList&lt;Integer&gt; resList;
    int maxCount;
    int count;
    TreeNode pre;

    public int[] findMode(TreeNode root) &#123;
        resList = new ArrayList&lt;&gt;();
        maxCount = 0;
        count = 0;
        pre = null;
        findMode1(root);

        int[] res = new int[resList.size()];
        for (int i = 0; i &lt; resList.size(); i++) &#123;
            res[i] = resList.get(i);
        &#125;
        return res;
    &#125;

    public void findMode1(TreeNode root) &#123;
        if (root == null) &#123;
            return;
        &#125;
        findMode1(root.left);

        int rootValue = root.val;

        if (pre == null || rootValue != pre.val) &#123;
            count = 1;
        &#125; else &#123;
            count++;
        &#125;

        if (count &gt; maxCount) &#123;

            resList.clear();
            resList.add(rootValue);
            maxCount = count;

        &#125; else if (count == maxCount) &#123;

            resList.add(rootValue);

        &#125;
        pre = root;

        findMode1(root.right);
    &#125;
&#125;    



if (pre == null || cur.val != pre.val) &#123;    //pre确认是否重复
                    count = 1;
                &#125;else &#123;
                    count++;
                &#125;
</code></pre>
<h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236 二叉树的最近公共祖先"></a>236 二叉树的最近公共祖先</h2><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">力扣题目链接</a></p>
<p>正如同，可惜二叉树不能够由下而上</p>
<p>原来是回溯，受教，遍历后的回溯的确很适合。遍历确定子树，回溯确定共同节点</p>
<p>但是怎么回溯确定共同点呢</p>
<p>这里回溯返回值很重要，正因为需要回溯的节点判断，那么返回值要能确定节点，所以函数类型就是 节点 </p>
<p>自身亦是祖先</p>
<pre><code>class Solution &#123;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;
        if (root == null || root == p || root == q) &#123; 
            return root;
        &#125;

        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        if(left == null &amp;&amp; right == null) &#123; 
            return null;
        &#125;else if(left == null &amp;&amp; right != null) &#123; 
            return right;
        &#125;else if(left != null &amp;&amp; right == null) &#123; 
            return left;
        &#125;else &#123; 
            return root;        //重点是这行（个人认为，思路问题
        &#125;
    &#125;
&#125;  
</code></pre>
]]></content>
      <tags>
        <tag> </tag>
      </tags>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day23|669 108 538</title>
    <url>/2023/04/06/day23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669 修剪二叉搜索树"></a>669 修剪二叉搜索树</h2><p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">力扣题目链接</a></p>
<p>……不得不说，是真难，我到现在第一个觉得一眼难（麻烦）的题</p>
<p>不成熟的比喻，在挂架（结点）上滑来滑去的铁链（位置）   天平 </p>
<p>数值的原因，上下层 乃至根节点都会改变，一发动全身（当然更狠的是堆？但没想到递归这么简单（准确来说是思路） 二点直接直线最短（</p>
<p>突然反应过来是二叉搜索不是二叉平衡，平衡应该真的要上红黑了，那这题是挺简单的</p>
<p>但是不得不承认思路挺妙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode trimBST(TreeNode root, int low, int high) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.val &lt; low) &#123;</span><br><span class="line">            return trimBST(root.right, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.val &gt; high) &#123;</span><br><span class="line">            return trimBST(root.left, low, high);</span><br><span class="line">        &#125;</span><br><span class="line">                  //用返回值嫁接</span><br><span class="line">        root.left = trimBST(root.left, low, high);</span><br><span class="line">        root.right = trimBST(root.right, low, high);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108 将有序数组转换为二叉搜索树"></a>108 将有序数组转换为二叉搜索树</h2><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">力扣题目链接</a></p>
<p>这题就是平衡，可惜是有序数组转换，不是二叉搜索的插入删除（打起来打起来），</p>
<pre><code>class Solution &#123;
    public TreeNode sortedArrayToBST(int[] nums) &#123;
        return sortedArrayToBST(nums, 0, nums.length);
    &#125;

    public TreeNode sortedArrayToBST(int[] nums, int left, int right) &#123;
        if (left &gt;= right) &#123;
            return null;
        &#125;
        if (right - left == 1) &#123;
            return new TreeNode(nums[left]);
        &#125;
        int mid = left + (right - left) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = sortedArrayToBST(nums, left, mid);
        root.right = sortedArrayToBST(nums, mid + 1, right);
        return root;
    &#125;
&#125;
</code></pre>
<p>原来递归觉得建立用的是数组的下标，我怎么把这个给忘了</p>
<p>把左边全构建完再搞右边</p>
<h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538 把二叉搜索树转换为累加树"></a>538 把二叉搜索树转换为累加树</h2><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">力扣题目链接</a></p>
<p>差点没看懂题意，直接转换成数组，后序遍历有点卡，但是这里是有顺序的从小到大，累加就要反过来</p>
<pre><code>class Solution &#123;
    int sum;   //毕竟返回的不是sum而是根，这里是全局变量
    public TreeNode convertBST(TreeNode root) &#123;
        sum = 0;
        convertBST1(root);
        return root;
    &#125;

    public void convertBST1(TreeNode root) &#123;
        if (root == null) &#123;
            return;
        &#125;
        convertBST1(root.right);
         //返回后开始相加
        sum += root.val;
        root.val = sum;

        convertBST1(root.left);
    &#125;
&#125;  
</code></pre>
<h2 id="总结直接看代码随想录比较全面"><a href="#总结直接看代码随想录比较全面" class="headerlink" title="总结直接看代码随想录比较全面"></a>总结直接看代码随想录比较全面</h2><p>二叉树的难度不止于此，打基础啊，这些题哪些不是二叉树必定会涉及的题</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day3|链表p1 203、707、206</title>
    <url>/2023/03/17/day3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="链表理论基础"><a href="#链表理论基础" class="headerlink" title="链表理论基础"></a>链表理论基础</h2><p>学408数据结构的时候，链表应该是第2章来着，所以非常熟悉，不过毕竟是伪代码，所以现在来写……还是不太行。令人头疼的倒不是next指针，而是头指针、尾指针，带头指针的插入，不带头指针的插入。408选择题出链表一般都是插入删除后prev、next的指向，循环链表，几个月了题型有点忘。结构不难，就是指针比较烦罢了。</p>
<p>存储空间零散，不需要特别记。但是链表的结构体、基本操作的代码还是需要特意记的。</p>
<p>C/C++的定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(int x) : val(x),next(NULL)&#123;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>王道的单链表节点类型描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct LNode&#123;</span><br><span class="line">    Elemtype data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure>

<p>初始化节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListNode* head = new ListNode();</span><br></pre></td></tr></table></figure>

<p>删除、插入都是改变指针指向，再free。</p>
<p>链表与数组性能分析，查询、增减问题。</p>
<p>具体的基础指令代码什么的，我有现实笔记（还有王道书）总之基础理解不成问题。</p>
<p>毕竟我现在主要在看java。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ListNode &#123;</span><br><span class="line">    // 结点的值</span><br><span class="line">    int val;</span><br><span class="line"></span><br><span class="line">    // 下一个结点</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    // 节点的构造函数(无参)</span><br><span class="line">    public ListNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 节点的构造函数(有一个参数)</span><br><span class="line">    public ListNode(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 节点的构造函数(有两个参数)</span><br><span class="line">    public ListNode(int val, ListNode next) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2><p>题目链接：<a href="https://leetcode.cn/problems/remove-linked-list-elements/">力扣</a></p>
<p>不知道有虚拟指针这种操作，受教了，的确比纠结头指针来的好，众生平等，众生平等，阿门。直接虚拟指针从头开始遍历，遍历到前一个，之后添加、删除操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode removeElements(ListNode head, int val) &#123;</span><br><span class="line">            if(head == null)&#123;    //先判空</span><br><span class="line">                return null;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ListNode extra = new ListNode (-1,head); //设置虚拟指针</span><br><span class="line">            ListNode pre = extra;</span><br><span class="line">            ListNode cur = head;</span><br><span class="line">            while(cur != null)&#123;        //经典筛选时间，删除就是next指针直接跳过指向指向下一个</span><br><span class="line">                if(cur.val==val)&#123;</span><br><span class="line">                    pre.next=cur.next;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    pre=cur;</span><br><span class="line">                &#125;</span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125; </span><br><span class="line">            return extra.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有什么特别要说的，因为思路的确很简单，就是如何写代码。</p>
<h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707 设计链表"></a>707 设计链表</h2><p><a href="https://leetcode.cn/problems/design-linked-list/">力扣题目链接</a></p>
<p>惊到我了，就是让你写这些基础功能如何实现的。408的数据结构也的确是有，不过不考，而且重点是头指针有无情况下的增删操作（于是好好看了一遍之后忘了……），不过这是必要的写代码，总是要写的。</p>
<p>get（index）</p>
<p>addAtHead(val)</p>
<p>addAtTail(val)</p>
<p>addAtIndex(index,val)</p>
<p>deleteAtIndex(index)</p>
<p>以上都是操作链表的基础操作，但是基础代码也是要写出来才能调用的啊</p>
<p>408专门讲了链表的指针在删除、添加方面是怎么指向的，所以我只是不会写代码，但是是纸上谈兵的纯新手（望天）每日一嚎实操能力。</p>
<p>第2、3个可以直接用最后一个变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ListNode&#123;</span><br><span class="line">    int val;      //链表的基础框架</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;  &#125;</span><br><span class="line">    ListNode(int val)&#123;</span><br><span class="line">        this.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyLinkedList &#123;</span><br><span class="line">                            //链表的基础操作类先定义一下size head</span><br><span class="line">    int size;</span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    public MyLinkedList() &#123;</span><br><span class="line">        size=0;                   //初始化</span><br><span class="line">        head=new ListNode(0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int get(int index) &#123;       //get，用了虚拟指针</span><br><span class="line">           if(index&gt;=size || index&lt;0)&#123;</span><br><span class="line">               return -1;</span><br><span class="line">           &#125;</span><br><span class="line">           ListNode extra =head;</span><br><span class="line">           for(int i=0;i&lt;=index;i++)&#123;</span><br><span class="line">               extra=extra.next;</span><br><span class="line">           &#125;</span><br><span class="line">           return extra.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtHead(int val) &#123;   //2、3套5</span><br><span class="line">            addAtIndex(0,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtTail(int val) &#123;</span><br><span class="line">             addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtIndex(int index, int val) &#123;  //插入元素，依然用虚拟指针</span><br><span class="line">            if(index &gt; size)&#123;</span><br><span class="line">                return ;</span><br><span class="line">            &#125;</span><br><span class="line">            if(index&lt;0)&#123;</span><br><span class="line">                index=0;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">            ListNode pred=head;</span><br><span class="line">            for(int i=0;i&lt;index;i++)&#123;</span><br><span class="line">                pred=pred.next;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode ad=new ListNode(val);</span><br><span class="line">            ad.next=pred.next;</span><br><span class="line">            pred.next=ad;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void deleteAtIndex(int index) &#123;</span><br><span class="line">            if(index&lt;0 || index&gt;=size)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            if(index==0)&#123;</span><br><span class="line">                head=head.next;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode pred = head;</span><br><span class="line">            for(int i=0;i&lt;index;i++)&#123;</span><br><span class="line">                pred=pred.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pred.next=pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="line"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="line"> * int param_1 = obj.get(index);</span><br><span class="line"> * obj.addAtHead(val);</span><br><span class="line"> * obj.addAtTail(val);</span><br><span class="line"> * obj.addAtIndex(index,val);</span><br><span class="line"> * obj.deleteAtIndex(index);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>双链表（还没尝试）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next,prev;</span><br><span class="line">    ListNode() &#123;&#125;;</span><br><span class="line">    ListNode(int val)&#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyLinkedList &#123;  </span><br><span class="line"></span><br><span class="line">    //记录链表中元素的数量</span><br><span class="line">    int size;</span><br><span class="line">    //记录链表的虚拟头结点和尾结点</span><br><span class="line">    ListNode head,tail;</span><br><span class="line">    </span><br><span class="line">    public MyLinkedList() &#123;</span><br><span class="line">        //初始化操作</span><br><span class="line">        this.size = 0;</span><br><span class="line">        this.head = new ListNode(0);</span><br><span class="line">        this.tail = new ListNode(0);</span><br><span class="line">        //这一步非常关键，否则在加入头结点的操作中会出现null.next的错误！！！</span><br><span class="line">        head.next=tail;</span><br><span class="line">        tail.prev=head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int get(int index) &#123;</span><br><span class="line">        //判断index是否有效</span><br><span class="line">        if(index&lt;0 || index&gt;=size)&#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode cur = this.head;</span><br><span class="line">        //判断是哪一边遍历时间更短</span><br><span class="line">        if(index &gt;= size / 2)&#123;</span><br><span class="line">            //tail开始</span><br><span class="line">            cur = tail;</span><br><span class="line">            for(int i=0; i&lt; size-index; i++)&#123;</span><br><span class="line">                cur = cur.prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            for(int i=0; i&lt;= index; i++)&#123;</span><br><span class="line">                cur = cur.next; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtHead(int val) &#123;</span><br><span class="line">        //等价于在第0个元素前添加</span><br><span class="line">        addAtIndex(0,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtTail(int val) &#123;</span><br><span class="line">        //等价于在最后一个元素(null)前添加</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void addAtIndex(int index, int val) &#123;</span><br><span class="line">        //index大于链表长度</span><br><span class="line">        if(index&gt;size)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //index小于0</span><br><span class="line">        if(index&lt;0)&#123;</span><br><span class="line">            index = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        //找到前驱</span><br><span class="line">        ListNode pre = this.head;</span><br><span class="line">        for(int i=0; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        //新建结点</span><br><span class="line">        ListNode newNode = new ListNode(val);</span><br><span class="line">        newNode.next = pre.next;</span><br><span class="line">        pre.next.prev = newNode;</span><br><span class="line">        newNode.prev = pre;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void deleteAtIndex(int index) &#123;</span><br><span class="line">        //判断索引是否有效</span><br><span class="line">        if(index&lt;0 || index&gt;=size)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //删除操作</span><br><span class="line">        size--;</span><br><span class="line">        ListNode pre = this.head;</span><br><span class="line">        for(int i=0; i&lt;index; i++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next.next.prev = pre;</span><br><span class="line">        pre.next = pre.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="line"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="line"> * int param_1 = obj.get(index);</span><br><span class="line"> * obj.addAtHead(val);</span><br><span class="line"> * obj.addAtTail(val);</span><br><span class="line"> * obj.addAtIndex(index,val);</span><br><span class="line"> * obj.deleteAtIndex(index);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>双链表应该比单链表有效率的多。</p>
<h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h2><p><a href="https://leetcode.cn/problems/reverse-linked-list/">力扣题目链接</a></p>
<p>开始的确觉得是要新开链表然后一个个转过去，先遍历到最后一个，知道长度再设置新链表，嗯……双链表还好，单链表的查找更麻烦了。直接把链表的指针反转怎么就没想到呢。</p>
<p>如果直接把指针反转的话，应该考虑指针改变的顺序问题，不然链表就丢失了，还是需要捋捋的。</p>
<p>A设为头指针，ex是存前一个地址的指针。</p>
<p>A.next用temp表示，再把next指向ex；A本身地址给ex，temp为新的A</p>
<p>还是挺绕的，建议画图。在电脑上画图有点麻烦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode reverseList(ListNode head) &#123;</span><br><span class="line">         ListNode prev = null;</span><br><span class="line">         ListNode cur = head;</span><br><span class="line">         ListNode temp = null;</span><br><span class="line">         while(cur != null)&#123;</span><br><span class="line">             temp = cur.next;     //注意这四段代码中2个指针的改变</span><br><span class="line">             cur.next = prev;</span><br><span class="line">             prev = cur;</span><br><span class="line">             cur = temp;</span><br><span class="line">         &#125;</span><br><span class="line">         return prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>prev、cur、head、hail、prior、past  经典设置名字</p>
<p>递归和栈也是好主意，二刷记得试试。</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day4|继续链表24、19、160、142</title>
    <url>/2023/03/18/day4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="24-两两交换链表的节点"><a href="#24-两两交换链表的节点" class="headerlink" title="24 两两交换链表的节点"></a>24 两两交换链表的节点</h2><p>交换链表为什么不是交换数值呢，不过交换指针的确正常，那么重点还是指针的指向变换顺序。依然使用虚拟头节点，不过没想到需要额外设置的指针更多了。</p>
<p>两个两个交换，那么可以以2个为单位，处理完一个单元直接跳到下一个单元。</p>
<p>简而言之就是两个元素的指针转向。</p>
<p><img src="https://pic.imgdb.cn/item/64158c96a682492fcc7e3bbc.png" alt="https://pic.imgdb.cn/item/64158c96a682492fcc7e3bbc.png"></p>
<p>字迹极度潦草不过能看懂就ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode swapPairs(ListNode head) &#123;</span><br><span class="line">          ListNode extra = new ListNode(-1);</span><br><span class="line">          extra.next= head;</span><br><span class="line">          ListNode cur = extra;</span><br><span class="line">          ListNode temp,A,B;</span><br><span class="line">          while(cur.next != null &amp;&amp; cur.next.next != null)&#123;</span><br><span class="line">              temp=cur.next.next.next;</span><br><span class="line">              A=cur.next;</span><br><span class="line">              B=cur.next.next;</span><br><span class="line"></span><br><span class="line">              cur.next=B;   //注意这一段的前后顺序</span><br><span class="line">              B.next=A;</span><br><span class="line">              A.next=temp;</span><br><span class="line">              cur = A;</span><br><span class="line">          &#125;</span><br><span class="line">          return extra.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19 删除链表的倒数第N个节点"></a>19 删除链表的倒数第N个节点</h2><p>一眼双指针，倒数节点，前后指针差N，当后指针到头的时候，前面的指针指的就是删除的位置。</p>
<p>想象一下游标卡尺。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode removeNthFromEnd(ListNode head, int n) &#123;</span><br><span class="line">                ListNode extra = new ListNode(0);</span><br><span class="line">                extra.next= head;</span><br><span class="line">                ListNode slow = extra;</span><br><span class="line">                ListNode fast = extra;</span><br><span class="line"></span><br><span class="line">                for(int i = 0;i &lt; n;i++)&#123;</span><br><span class="line">                    fast = fast.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                while(fast.next!=null)&#123;</span><br><span class="line">                    fast=fast.next;</span><br><span class="line">                    slow=slow.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                slow.next=slow.next.next;</span><br><span class="line">                return extra.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="160-链表相交"><a href="#160-链表相交" class="headerlink" title="160 链表相交"></a>160 链表相交</h2><p>其实408数据结构有这题，但是我没有做，我的。</p>
<p>开始觉得不知怎么下手，嗯……，因为不想考虑链表长度，但是就是要先得出链表长度啊，得出长度然后后端对齐。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         next = null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">        ListNode curA = headA;</span><br><span class="line">        ListNode curB = headB;</span><br><span class="line">        int alength = 0,blength = 0;</span><br><span class="line">        while(curA != null)&#123;</span><br><span class="line">            alength++;</span><br><span class="line">            curA=curA.next;</span><br><span class="line">        &#125;</span><br><span class="line">        while (curB != null)&#123;</span><br><span class="line">            blength++;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curA=headA;</span><br><span class="line">        curB=headB;</span><br><span class="line">        if(blength&gt;alength)&#123;             //swap</span><br><span class="line">            swap(alength,blength);</span><br><span class="line">            swap(curA,curB);           </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       int gap= alength-blength;</span><br><span class="line">       for(int i=0;i&lt;gap;i++)&#123;</span><br><span class="line">           curA=curA.next;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">       while(curA != null)&#123;</span><br><span class="line">           if(curA==curB)</span><br><span class="line">           return curA;</span><br><span class="line"></span><br><span class="line">           curA=curA.next;</span><br><span class="line">           curB=curB.next;</span><br><span class="line">       &#125;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142 环形链表II"></a>142 环形链表II</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></p>
<p>给定链表，返回入环节点。好吧，我是真不会，虽然应该很简单。（还不是你不下笔算）想想小学生的追逐问题啊</p>
<p>打住，思路，思路。</p>
<p>首先是是否有环，这一步我是知道的，快慢指针，假如两者重合那就必有环。快走两步，慢走一步，相对速度1，也不会跳过。</p>
<p>但是如何找到入口呢？经典列方程。</p>
<p><img src="https://pic.imgdb.cn/item/6415ce60a682492fcc05e5e5.png" alt="https://pic.imgdb.cn/item/6415ce60a682492fcc05e5e5.png"></p>
<p><a href="https://excalidraw.com/">https://excalidraw.com/</a>    这个网址你值得拥有（真</p>
<p>于是就是 19 删倒数元素 的思路差不多，一个从起点，一个从相遇点起步，会在环形入口相遇。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         next = null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ListNode detectCycle(ListNode head) &#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        while(fast != null &amp;&amp; fast.next != null)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            if(slow == fast)&#123;</span><br><span class="line">                ListNode index1 = fast;</span><br><span class="line">                ListNode index2 = head;</span><br><span class="line"></span><br><span class="line">                while(index1 != index2)&#123;</span><br><span class="line">                    index1 = index1.next;</span><br><span class="line">                    index2 = index2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                return index1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>捋了一遍怎么思路却开始又混乱了……明天周日，复盘（真的会复盘吗</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day6|哈希表 242、349、201、1</title>
    <url>/2023/03/20/day6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="哈希表理论基础"><a href="#哈希表理论基础" class="headerlink" title="哈希表理论基础"></a>哈希表理论基础</h2><p>408学数据结构的时候哈希表不是重点，只是一个会考但是不会考代码的选择题方面的考点，所以我只是有点印象了现在。重新学吧，况且是要真刀实枪上代码，come on。</p>
<p>哈希表，根据关键码的值直接进行访问的数据结构，用来快速判断一个元素是否出现在集合里。</p>
<p>哈希函数，well，有印象了，索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index=hashFunction(name)</span><br><span class="line">hashFunction = hashCode(name)％tableSize</span><br></pre></td></tr></table></figure>

<p>哈希碰撞，拉链法，线性探测法。</p>
<p>拉链法，冲突元素存储在链表中。</p>
<p>线性探测法，往下顺延找空位。</p>
<p>哈希结构  数组、集合、映射</p>
<p>代码随想录的表崩了，而且我也有点混乱，c++的std：：set/multiset/unordered_set?</p>
<p>java还是看菜鸟吧</p>
<p>总之，快速判断元素是否存在用哈希，牺牲空间换时间。</p>
<h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242 有效的字母异位词"></a>242 有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接</a></p>
<p>暴力解法，明显两层for循环。</p>
<p>现在学哈希，用哈希。不过看了代码随想录的思路，这个思路我曾经想过的，额外设一个数组，对相应的位置加减，看最后数值是否为0，没想到这个思路是哈希啊。</p>
<p><del>而且的确chatAt( )这个函数我不知道，我小白。</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isAnagram(String s, String t) &#123;</span><br><span class="line">          int[] record = new int[26];</span><br><span class="line">          for(int i = 0;i &lt; s.length();i++)&#123;</span><br><span class="line">              record[s.charAt(i) - &#x27;a&#x27;]++;</span><br><span class="line">          &#125;</span><br><span class="line">          for(int i =0;i&lt; t.length();i++)&#123;</span><br><span class="line">              record[t.charAt(i) - &#x27;a&#x27;]--;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          for(int count: record)&#123;</span><br><span class="line">              if(count != 0)&#123;</span><br><span class="line">                  return false;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349 两个数组的交集"></a>349 两个数组的交集</h2><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">力扣题目链接</a></p>
<p>unordered_set  一种哈希数据结构</p>
<p>（坦白地说我一开始想到的是双指针）</p>
<p>multiset、set为红黑树基底，well，问题是，我用的是java，而且就算是c也不用c++啊</p>
<p>不太会哈希啊，Java的哈希……要去专门找找教程了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] intersection(int[] nums1, int[] nums2) &#123;</span><br><span class="line">           if(nums1==null || nums1.length == 0 ||nums2 == null ||nums2.length == 0)&#123;</span><br><span class="line">               return new int[0];</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set1 = new HashSet&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; resSet = new HashSet&lt;&gt;();   </span><br><span class="line">    for (int i : nums1) &#123;</span><br><span class="line">            set1.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    for (int i : nums2) &#123;</span><br><span class="line">            if (set1.contains(i)) &#123;</span><br><span class="line">                resSet.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        int[] arr = new int[resSet.size()];</span><br><span class="line">        int j = 0;</span><br><span class="line">        for(int i : resSet)&#123;</span><br><span class="line">            arr[j++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return arr;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202 快乐数"></a>202 快乐数</h2><p><a href="https://leetcode.cn/problems/happy-number/">力扣题目链接</a></p>
<p>的确不会。最让我棘手的是，不会位数操作，虽然之前就碰到过要每位如何如何，但是除10的操作我总是搞不好……不会，的确不会。</p>
<p>把计算中所得的数加入哈希表，检测是否重复，受教了。</p>
<p>哈希表的结构————</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isHappy(int n) &#123;</span><br><span class="line">         Set&lt;Integer&gt; record = new HashSet&lt;&gt;();</span><br><span class="line">        while (n != 1 &amp;&amp; !record.contains(n)) &#123;</span><br><span class="line">            record.add(n);</span><br><span class="line">            n = getNextNumber(n);</span><br><span class="line">        &#125;</span><br><span class="line">        return n == 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private int getNextNumber(int n) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        while (n &gt; 0) &#123;</span><br><span class="line">            int temp = n % 10;</span><br><span class="line">            res += temp * temp;</span><br><span class="line">            n = n / 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h2><p>暴力解很容易想出来，不过我自己想的是遍历，遍历找目标值减的差。好吧，也是两层for循环。</p>
<p>不过最优解还是哈希（怨念</p>
<p>map    key value 结构    key 数值    value 下标</p>
<p>map 存放访问过的元素     {key：数据元素，value：数组元素对应的下标}</p>
<p>哈希表查找的是另一个匹配的值 <del>什么啊，换成哈希表不就是和我一样吗</del></p>
<p>所以，我真的要好好学哈希表。</p>
<p>Java在哈希表方面是怎么表示的啊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int[] twoSum(int[] nums, int target) &#123;</span><br><span class="line">    int[] res = new int[2];</span><br><span class="line">    if(nums == null || nums.length == 0)&#123;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    for(int i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">        int temp = target - nums[i];   /</span><br><span class="line">        if(map.containsKey(temp))&#123;</span><br><span class="line">            res[1] = i;            //这一段是?</span><br><span class="line">            res[0] = map.get(temp);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);        &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上所述，遭到了哈希表的毒打，代码随想录哈希表表示是C++，Java……</p>
<p>更不用去想明天的了（悲）啊啊啊啊    不会写，不会写</p>
<p>去找视频了（挥白旗</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day8|字符串 344、541、05、151 58.2</title>
    <url>/2023/03/22/day8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344 反转字符串"></a>344 反转字符串</h2><p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p>
<p>从哈希表到字符串就像晕车下了车一样清新，难度瞬间下来了，不过额外空间只有o(1)，需要原地修改。不能愉快地暴力解，需要回顾前几天的思路了。双指针，毕竟是数组而不是链表，数组可以直接设置最后的指针，而链表需要先遍历长度还是有点多余的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public void reverseString(char[] s) &#123;</span><br><span class="line">           int f = 0;</span><br><span class="line">           int l = s.length - 1;</span><br><span class="line">           for(int i = 0 ;i &lt; l;i++)&#123;</span><br><span class="line">              char temp = s[l];</span><br><span class="line">               s[l] = s[f];</span><br><span class="line">               s[f] = temp;</span><br><span class="line">               l--;</span><br><span class="line">               f++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541 反转字符串II"></a>541 反转字符串II</h2><p><a href="https://leetcode.cn/problems/reverse-string-ii/">力扣题目链接</a></p>
<p>已经快要习惯第一时间看看能不能用双指针了（悲），游标卡尺整体挪动2k，还好？额，双指针是另类遍历，但是2k是直接分段，不太行。直接跳2k？</p>
<p>不会写，判断字符串的不存在不会写判断条件，所以说实操啊。内层的嵌套就是上一题，但是前置……</p>
<p>放一下残次品，不行太不行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String reverseStr(String s, int k) &#123;</span><br><span class="line">        char[] ch = s.toCharArray();</span><br><span class="line">        int f = 0;</span><br><span class="line">        int l = s.length - 1;</span><br><span class="line">        if(s[k-1] &amp;&amp; s[2k])&#123;  // 条件</span><br><span class="line">            for( int i = 1;i&lt;l;l++)&#123;</span><br><span class="line">                char temp = s[l];</span><br><span class="line">                s[l] = s[f];</span><br><span class="line">                s[f] = temp;    //  不对 k后指针的定位不行</span><br><span class="line">                l--;</span><br><span class="line">                f++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String reverseStr(String s, int k) &#123;</span><br><span class="line">        char[] ch = s.toCharArray();</span><br><span class="line">        for(int i = 0;i &lt; ch.length;i += 2 * k)&#123;</span><br><span class="line">            int start = i;</span><br><span class="line">            // 判断尾数够不够k个来取决end指针的位置</span><br><span class="line">            int end = Math.min(ch.length - 1,start + k - 1);</span><br><span class="line">            while(start &lt; end)&#123;</span><br><span class="line">                </span><br><span class="line">                char temp = ch[start];</span><br><span class="line">                ch[start] = ch[end];</span><br><span class="line">                ch[end] = temp;</span><br><span class="line"></span><br><span class="line">                start++;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new String(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字符串可以直接看长度的……那就好办多了，我知识忘了太多了。</p>
<h2 id="05-替换空格"><a href="#05-替换空格" class="headerlink" title="05 替换空格"></a>05 替换空格</h2><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">力扣题目链接</a></p>
<p>暴力不是很简单吗，直接赋值？</p>
<p>尝试了一下暴力，编译错误，c语言我真要重新看一遍了。</p>
<p>官方的暴力解，参考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String replaceSpace(String s) &#123;</span><br><span class="line">        StringBuilder res = new StringBuilder();</span><br><span class="line">        for(Character c : s.toCharArray())</span><br><span class="line">        &#123;</span><br><span class="line">            if(c == &#x27; &#x27;) res.append(&quot;%20&quot;);</span><br><span class="line">            else res.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把空格集体调换位置，字母往后凝聚，没有想到，依稀记得之前碰到过类似的，没想起来啊。或许，很多删除都可以这么做。</p>
<p>原来如此，不能直接替换，%20是三个啊，糊涂了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String replaceSpace(String s) &#123;</span><br><span class="line">    if(s == null || s.length() == 0)&#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    //扩充空间，空格数量2倍</span><br><span class="line">    StringBuilder str = new StringBuilder();</span><br><span class="line">    for (int i = 0; i &lt; s.length(); i++) &#123;</span><br><span class="line">        if(s.charAt(i) == &#x27; &#x27;)&#123;</span><br><span class="line">            str.append(&quot;  &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //若是没有空格直接返回</span><br><span class="line">    if(str.length() == 0)&#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    //有空格情况 定义两个指针</span><br><span class="line">    int left = s.length() - 1;//左指针：指向原始字符串最后一个位置</span><br><span class="line">    s += str.toString();</span><br><span class="line">    int right = s.length()-1;//右指针：指向扩展字符串的最后一个位置</span><br><span class="line">    char[] chars = s.toCharArray();</span><br><span class="line">    while(left&gt;=0)&#123;</span><br><span class="line">        if(chars[left] == &#x27; &#x27;)&#123;</span><br><span class="line">            chars[right--] = &#x27;0&#x27;;</span><br><span class="line">            chars[right--] = &#x27;2&#x27;;</span><br><span class="line">            chars[right] = &#x27;%&#x27;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            chars[right] = chars[left];</span><br><span class="line">        &#125;</span><br><span class="line">        left--;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    return new String(chars);  //3步</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题是 StringBuilding 这个结构我不知道啊，今天刚翻出来我的java教科书，很多函数都要查一遍。</p>
<h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151 翻转字符串里的单词"></a>151 翻转字符串里的单词</h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">力扣题目链接</a></p>
<p>初始思路就是遇到空格把前边的词翻转加入，但是肯定会很麻烦，这我是知道的。看了解析，有点熟悉，看过双翻转，但是不知道原理，原来如此。</p>
<p>去多余空格、反转，词反转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">   </span><br><span class="line">    public String reverseWords(String s) &#123;</span><br><span class="line">        // System.out.println(&quot;ReverseWords.reverseWords2() called with: s = [&quot; + s + &quot;]&quot;);</span><br><span class="line">        // 1.去除首尾以及中间多余空格</span><br><span class="line">        StringBuilder sb = removeSpace(s);</span><br><span class="line">        // 2.反转整个字符串</span><br><span class="line">        reverseString(sb, 0, sb.length() - 1);</span><br><span class="line">        // 3.反转各个单词</span><br><span class="line">        reverseEachWord(sb);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private StringBuilder removeSpace(String s) &#123;</span><br><span class="line">        // System.out.println(&quot;ReverseWords.removeSpace() called with: s = [&quot; + s + &quot;]&quot;);</span><br><span class="line">        int start = 0;</span><br><span class="line">        int end = s.length() - 1;</span><br><span class="line">        while (s.charAt(start) == &#x27; &#x27;) start++;</span><br><span class="line">        while (s.charAt(end) == &#x27; &#x27;) end--;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        while (start &lt;= end) &#123;</span><br><span class="line">            char c = s.charAt(start);</span><br><span class="line">            if (c != &#x27; &#x27; || sb.charAt(sb.length() - 1) != &#x27; &#x27;) &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        // System.out.println(&quot;ReverseWords.removeSpace returned: sb = [&quot; + sb + &quot;]&quot;);</span><br><span class="line">        return sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 反转字符串指定区间[start, end]的字符</span><br><span class="line">     */</span><br><span class="line">    public void reverseString(StringBuilder sb, int start, int end) &#123;</span><br><span class="line">        // System.out.println(&quot;ReverseWords.reverseString() called with: sb = [&quot; + sb + &quot;], start = [&quot; + start + &quot;], end = [&quot; + end + &quot;]&quot;);</span><br><span class="line">        while (start &lt; end) &#123;</span><br><span class="line">            char temp = sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        // System.out.println(&quot;ReverseWords.reverseString returned: sb = [&quot; + sb + &quot;]&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void reverseEachWord(StringBuilder sb) &#123;</span><br><span class="line">        int start = 0;</span><br><span class="line">        int end = 1;</span><br><span class="line">        int n = sb.length();</span><br><span class="line">        while (start &lt; n) &#123;</span><br><span class="line">            while (end &lt; n &amp;&amp; sb.charAt(end) != &#x27; &#x27;) &#123;</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">            reverseString(sb, start, end - 1);</span><br><span class="line">            start = end + 1;</span><br><span class="line">            end = start + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="58-左旋转字符串"><a href="#58-左旋转字符串" class="headerlink" title="58.左旋转字符串"></a>58.左旋转字符串</h2><p>之前见过这道题，所以知道2次翻转。如果没见过，我大概会尝试双指针，字符串化链表（这不麻烦？），新加数组，等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String reverseLeftWords(String s, int n) &#123;</span><br><span class="line">        int len=s.length();</span><br><span class="line">        StringBuilder sb=new StringBuilder(s);</span><br><span class="line">        reverseString(sb,0,n-1);</span><br><span class="line">        reverseString(sb,n,len-1);</span><br><span class="line">        return sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">     public void reverseString(StringBuilder sb, int start, int end) &#123;</span><br><span class="line">        while (start &lt; end) &#123;</span><br><span class="line">            char temp = sb.charAt(start);</span><br><span class="line">            sb.setCharAt(start, sb.charAt(end));</span><br><span class="line">            sb.setCharAt(end, temp);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最近几天忙死了，真的，我周末会回过头好好看的</p>
<p>毕设，开会，无意义的路途，熬夜，要死了     而且java新手，很多函数不懂</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day9|（kmp） 回顾哈希、字符串</title>
    <url>/2023/03/23/day9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="28-实现strStr"><a href="#28-实现strStr" class="headerlink" title="28 实现strStr( )"></a>28 实现strStr( )</h2><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">力扣题目链接</a></p>
<p>这个函数讲的是 KMP算法，408数据结构很着重讲了，虽然不考大题，主要是选择题，例如next数组，nextval数组，下标</p>
<p>所以我kmp还是懂个百分之六七十，真让我写还是算了（手动扇子脸</p>
<p>一刷先跳了，前几天进度不乐观，回顾前几天。</p>
<h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459 重复的子字符串"></a>459 重复的子字符串</h2><p>子串重复多次构成的确可以用kmp，但是如何kmp呢？</p>
<p>思路有点蒙，next数组我知道，但是如何判定重复出现的子字符串？先跳了，有空看看视频。</p>
<h2 id="总结字符串、数组"><a href="#总结字符串、数组" class="headerlink" title="总结字符串、数组"></a>总结字符串、数组</h2><p>主要讲的是前几天的代码题思路总结，思路还好，但是函数我不认识一点也不好。可能也有c++ primer 我看不下去的原因…… 虽然格式大差不差与c，但就是莫名各种不适应，所以函数不认识直接就跪了。</p>
<p>字符串的基本操作指令，性质我也忘了；数组常常提，但是很少考虑操作的事，还是跪，复习，看前几天的代码题了。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/13/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day25|216 17</title>
    <url>/2023/04/08/day25/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="216-组合总和III"><a href="#216-组合总和III" class="headerlink" title="216 组合总和III"></a>216 组合总和III</h2><p><a href="https://leetcode.cn/problems/combination-sum-iii/">力扣题目链接</a></p>
<p>虽然相加就想到哈希不过显然不太行</p>
<p>穷举再筛选</p>
<pre><code>class Solution &#123;
    LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();
    List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();

    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123;
        build(k, n, 1, 0);
        return ans;
    &#125;

    private void allchoose(int k, int n, int startIndex, int sum) &#123;

        if (sum &gt; n||path.size() &gt; k)
            return;

        if (sum == n &amp;&amp; path.size() == k) &#123;
            ans.add(new ArrayList&lt;&gt;(path));
            return;
        &#125;

        for(int i = startIndex; i &lt;= 9; i++) &#123;
            path.add(i);
            sum += i;
            allchoose(k, n, i + 1, sum);
            sum -= i;  // 还原跳到另一叉
            path.removeLast();
        &#125;
    &#125;
&#125;  
</code></pre>
<h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17 电话号码的字母组合"></a>17 电话号码的字母组合</h2><p> <a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">力扣题目链接</a></p>
<p>字母与数字的关系果然还是要提前输入啊，在之前的基础上加上了字母，n叉树的节点视为一次for的总和，个数为循环次数</p>
<pre><code>class Solution &#123;
    List&lt;String&gt; list = new ArrayList&lt;&gt;();

    public List&lt;String&gt; letterCombinations(String digits) &#123;
        if (digits == null || digits.length() == 0) &#123;
            return list;
        &#125;

        String[] numString = &#123;&quot;&quot;, &quot;&quot;, &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;, &quot;pqrs&quot;, &quot;tuv&quot;, &quot;wxyz&quot;&#125;;

        backTracking(digits, numString, 0);
        return list;

    &#125;

    StringBuilder temp = new StringBuilder();  //单个
    public void backTracking(String digits, String[] numString, int num) &#123;
        if (num == digits.length()) &#123;
            list.add(temp.toString());
            return;
        &#125;

        String str = numString[digits.charAt(num) - &#39;0&#39;];

        for (int i = 0; i &lt; str.length(); i++) &#123;
            temp.append(str.charAt(i));      
                         //毕竟是遍历，全都可以选择
            backTracking(digits, numString, num + 1);

            temp.deleteCharAt(temp.length() - 1);  //返回上一级
        &#125;
    &#125;
&#125;    
</code></pre>
<p>写代码随想录唯一的失策就是我对库函数不熟，也不是不知道意思，但是不知道有哪些，失策</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day24|回溯 77</title>
    <url>/2023/04/06/day24/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>回溯是递归的副产品 但是效率不高</p>
<ul>
<li>组合问题：N个数里面按一定规则找出k个数的集合</li>
<li>切割问题：一个字符串按一定规则有几种切割方式</li>
<li>子集问题：一个N个数的集合里有多少符合条件的子集</li>
<li>排列问题：N个数按一定规则全排列，有几种排列方式</li>
<li>棋盘问题：N皇后，解数独等等    （路径呢</li>
</ul>
<p>树形   有点像b树</p>
<h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77 组合"></a>77 组合</h2><p><a href="https://leetcode.cn/problems/combinations/">力扣题目链接</a></p>
<p>for循环的确不错，但是k过多就没办法了</p>
<p>回溯加for循环，一时间有点转不过来</p>
<p>注意剪枝</p>
<pre><code>class Solution &#123;
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();
    public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) &#123;
        combineHelper(n, k, 1);    //start
        return result;
    &#125;


    private void combineHelper(int n, int k, int startIndex)&#123;
        if (path.size() == k)&#123;            //最终统计长度
            result.add(new ArrayList&lt;&gt;(path));
            return;
        &#125;
                                        //跳跃间隔由此层for决定
        for (int i = startIndex; i &lt;= n - (k - path.size()) + 1; i++)&#123;
            path.add(i);
            combineHelper(n, k, i + 1);     //startindex加1，二叉树加一层
            path.removeLast();
        &#125;
    &#125;
&#125;    
</code></pre>
<p> 虽然理解思路，但是还是有点混乱</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day28|93 78 90</title>
    <url>/2023/04/11/day28/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93 复原IP地址"></a>93 复原IP地址</h2><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣题目链接</a></p>
<p>和上一题一样，不过检测回文变成了ip判断</p>
<pre><code>class Solution &#123;
    List&lt;String&gt; result = new ArrayList&lt;String&gt;();
    StringBuilder stringBuilder = new StringBuilder();

    public List&lt;String&gt; restoreIpAddresses(String s) &#123;
        restoreIpAddressesHandler(s, 0, 0);
        return result;
    &#125;


    public void restoreIpAddressesHandler(String s, int start, int number) &#123;

        if (start == s.length() &amp;&amp; number == 4) &#123;
            result.add(stringBuilder.toString());
            return;
        &#125;
        if (start == s.length() || number == 4) &#123;
            return;
        &#125;
                    //这一段的范围……
        for (int i = start; i &lt; s.length() &amp;&amp; i - start &lt; 3 &amp;&amp; Integer.parseInt(s.substring(start, i + 1)) &gt;= 0
                &amp;&amp; Integer.parseInt(s.substring(start, i + 1)) &lt;= 255; i++) &#123;

            if (i + 1 - start &gt; 1 &amp;&amp; s.charAt(start) - &#39;0&#39; == 0) &#123;
                continue;
            &#125;
            stringBuilder.append(s.substring(start, i + 1));

            if (number &lt; 3) &#123;
                stringBuilder.append(&quot;.&quot;);
            &#125;
            number++;

            restoreIpAddressesHandler(s, i + 1, number);
            number--;
            stringBuilder.delete(start + number, i + number + 2);
        &#125;
    &#125; 
</code></pre>
<h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78 子集"></a>78 子集</h2><p><a href="https://leetcode.cn/problems/subsets/">力扣题目链接</a></p>
<p>收集树形结构中树的所有节点，说明白不就好了</p>
<pre><code>class Solution &#123;
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();
    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123;
        subsetsHelper(nums, 0);
        return result;
    &#125;

    private void subsetsHelper(int[] nums, int startIndex)&#123;
        result.add(new ArrayList&lt;&gt;(path));
        if (startIndex &gt;= nums.length)&#123;    // ?
            return;
        &#125;
        for (int i = startIndex; i &lt; nums.length; i++)&#123;
            path.add(nums[i]);
            subsetsHelper(nums, i + 1);
            path.removeLast();
        &#125;
    &#125;
&#125; 
</code></pre>
<h2 id="90-子集"><a href="#90-子集" class="headerlink" title="90 子集"></a>90 子集</h2><p><a href="https://leetcode.cn/problems/subsets-ii/">力扣题目链接</a></p>
<p>树层还是树枝？</p>
<pre><code>lass Solution &#123;

  List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
  LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();

  public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup( int[] nums ) &#123;
    Arrays.sort( nums );
    subsetsWithDupHelper( nums, 0 );
    return res;
  &#125;


  private void subsetsWithDupHelper( int[] nums, int start ) &#123;
    res.add( new ArrayList&lt;&gt;( path ) );

    for ( int i = start; i &lt; nums.length; i++ ) &#123;

      if ( i &gt; start &amp;&amp; nums[i - 1] == nums[i] ) 
        continue;


      path.add( nums[i] );
      subsetsWithDupHelper( nums, i + 1 );
      path.removeLast();
    &#125;
  &#125;

&#125;  
</code></pre>
<p>回溯的知识轮廓是有了，但是我的实操……最近事太多了</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day27|39、40、131</title>
    <url>/2023/04/10/day27/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39 组合总和"></a>39 组合总和</h2><p><a href="https://leetcode.cn/problems/combination-sum/">力扣题目链接</a></p>
<p>无数量要求，只有目标要求，well</p>
<p>while？ 不，是break</p>
<p>while的判断句信息量太少了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates); </span><br><span class="line">        backtracking(res, new ArrayList&lt;&gt;(), candidates, target, 0, 0);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] candidates, int target, int sum, int idx) &#123;</span><br><span class="line">        if (sum == target) &#123;           //end</span><br><span class="line">            res.add(new ArrayList&lt;&gt;(path));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = idx; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            if (sum + candidates[i] &gt; target)</span><br><span class="line">               break;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line"></span><br><span class="line">            backtracking(res, path, candidates, target, sum + candidates[i], i);</span><br><span class="line"></span><br><span class="line">            path.remove(path.size() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要捋清函数的参数，个数，为什么需要这些，定义不同亦有不同。</p>
<h2 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40 组合总和II"></a>40 组合总和II</h2><p><a href="https://leetcode.cn/problems/combination-sum-ii/">力扣题目链接</a></p>
<p>数字只能出现一次，怎么去重？</p>
<p>有重复元素，不能有重复的组合……well</p>
<p>讲解是层不同，枝可同(不过组合不是集合？不包含相同元素？有序？)</p>
<p>好的，没有提供有序就要自己排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">  LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();</span><br><span class="line">  List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class="line">  boolean[] used;   //bool   </span><br><span class="line">  int sum = 0;</span><br><span class="line"></span><br><span class="line">  public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123;</span><br><span class="line">    used = new boolean[candidates.length];</span><br><span class="line">   </span><br><span class="line">    Arrays.fill(used, false);   // fill</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line"></span><br><span class="line">    backTracking(candidates, target, 0);</span><br><span class="line">    return ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private void backTracking(int[] candidates, int target, int startIndex) &#123;</span><br><span class="line">    if (sum == target) &#123;</span><br><span class="line">      ans.add(new ArrayList(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = startIndex; i &lt; candidates.length; i++) &#123;</span><br><span class="line">      if (sum + candidates[i] &gt; target) </span><br><span class="line">          break;</span><br><span class="line">      </span><br><span class="line">      if (i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; !used[i - 1]) &#123;</span><br><span class="line">        continue;                              //确认遍历过，中间的第二个判断式注意，是回溯后的检查吗</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      used[i] = true;</span><br><span class="line">      sum += candidates[i];</span><br><span class="line">      path.add(candidates[i]);</span><br><span class="line"> </span><br><span class="line">      backTracking(candidates, target, i + 1);</span><br><span class="line">      used[i] = false;</span><br><span class="line">      sum -= candidates[i];</span><br><span class="line">      path.removeLast();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131 分割回文串"></a>131 分割回文串</h2><p><a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣题目链接</a></p>
<p>真·没有头绪</p>
<p>怎么知道哪里回文，分割后判断回文？，你怎么知道回文……</p>
<p>分割本身并不是关键，关键是在哪里分割是回文，还是说发现回文于是分割（还有大回文套小回文那种） 很混乱</p>
<p>回溯过程剪枝？</p>
<p>投降</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; lists = new ArrayList&lt;&gt;();</span><br><span class="line">    Deque&lt;String&gt; deque = new LinkedList&lt;&gt;();</span><br><span class="line">    public List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        backTracking(s, 0);</span><br><span class="line">        return lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void backTracking(String s, int startIndex) &#123;</span><br><span class="line"></span><br><span class="line">        if (startIndex &gt;= s.length()) &#123;</span><br><span class="line">            lists.add(new ArrayList(deque));</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line"> </span><br><span class="line">            if (isPalindrome(s, startIndex, i)) &#123;</span><br><span class="line">                String str = s.substring(startIndex, i + 1);</span><br><span class="line">                deque.addLast(str);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            backTracking(s, i + 1);</span><br><span class="line"></span><br><span class="line">            deque.removeLast();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isPalindrome(String s, int startIndex, int end) &#123;</span><br><span class="line">        for (int i = startIndex, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            if (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历中筛取</p>
]]></content>
  </entry>
  <entry>
    <title>代码随想录算法训练营Day29|491 46 47</title>
    <url>/2023/04/11/day29/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491 递增子序列"></a>491 递增子序列</h2><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">力扣题目链接</a></p>
<p>全回溯然后剪枝，条件是长度大于2且保持递增，if不递增，跳出，另一枝回溯</p>
<p>但是注意不能重复  注意continue</p>
<p>赞同回溯，而不是深度优先搜索，虽然底层相同不过没必要</p>
<pre><code>class Solution &#123;
    private List&lt;Integer&gt; path = new ArrayList&lt;&gt;();
    private List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
    public List&lt;List&lt;Integer&gt;&gt; findSubsequences(int[] nums) &#123;
        backtracking(nums,0);
        return res;
    &#125;

    private void backtracking (int[] nums, int start) &#123;
        if (path.size() &gt; 1) &#123;
            res.add(new ArrayList&lt;&gt;(path));
        &#125;

        int[] used = new int[201];
        for (int i = start; i &lt; nums.length; i++)&#123;
                       //路径不为空 且 递增（因为路径截取位置的不定性所以一个是path.size一个是num数组
                                //确定已经uesd
            if (!path.isEmpty() &amp;&amp; nums[i] &lt; path.get(path.size() - 1) ||
                    (used[nums[i] + 100] == 1)) 
               continue;

            used[nums[i] + 100] = 1;
            path.add(nums[i]);
            backtracking(nums, i + 1);
            path.remove(path.size() - 1);

        &#125;
    &#125;
&#125;     
</code></pre>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46 全排列"></a>46 全排列</h2><p><a href="https://leetcode.cn/problems/permutations/">力扣题目链接</a></p>
<p>for看起来很美好，问题是n大起来就并不美好了</p>
<p>因为是全排列。本身也不重复，所以（层次）从0开始，but不能重复，path还是要有，也正是因为（层次）从0遍历的原因，path要输入的就是遍历过的全部了</p>
<pre><code>class Solution &#123;
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    LinkedList&lt;Integer&gt; path = new LinkedList&lt;&gt;();
    boolean[] used;
    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;
        if (nums.length == 0)&#123;
            return result;
        &#125;
        used = new boolean[nums.length];

        permuteHelper(nums);

        return result;

    &#125;

    private void permuteHelper(int[] nums)&#123;
        if (path.size() == nums.length)&#123;
            result.add(new ArrayList&lt;&gt;(path));
            return;
        &#125;
        for (int i = 0; i &lt; nums.length; i++)&#123;
            
            if (used[i])&#123;
                continue;
            &#125;

            used[i] = true;
            path.add(nums[i]);

            permuteHelper(nums);

            path.removeLast();
            used[i] = false;
        &#125;
    &#125;
&#125;   
</code></pre>
<h2 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47 全排列II"></a>47 全排列II</h2><p><a href="https://leetcode.cn/problems/permutations-ii/">力扣题目链接</a></p>
<p>可包含重复数字，返回不重复 排列</p>
<p>还是要排序，和之前的某题一样，很多题的内核都是相同的，我现在由衷地相信二刷乃至三刷我所用的时间只会越来越长</p>
<p><del>并不妨碍这题我没思路写</del>        道阻且长道阻且长</p>
<pre><code>class Solution &#123;
    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();
    List&lt;Integer&gt; path = new ArrayList&lt;&gt;();

    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123;
        boolean[] used = new boolean[nums.length];
        Arrays.fill(used, false);
        Arrays.sort(nums);

        backTrack(nums, used);

        return result;
    &#125;

    private void backTrack(int[] nums, boolean[] used) &#123;
        if (path.size() == nums.length) &#123;
            result.add(new ArrayList&lt;&gt;(path));
            return;
        &#125;
        for (int i = 0; i &lt; nums.length; i++) &#123;
            //  true 上下层 false 同层，if线  同层使用过代表if和本线相同 跳
            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; used[i - 1] == false) &#123;
                continue;
            &#125;

            if (used[i] == false) &#123;
                used[i] = true;
                path.add(nums[i]);

                backTrack(nums, used);

                path.remove(path.size() - 1);
                used[i] = false;//回溯
            &#125;
        &#125;
    &#125;
&#125;   
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>day30</title>
    <url>/2023/04/12/day30/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
</search>
